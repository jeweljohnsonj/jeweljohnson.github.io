[
  {
    "path": "posts/2021-12-18-quality-of-life-modifications-for-your-distill-webistes/",
    "title": "Quality of life modifications for your distill websites",
    "description": "In this post, you can find simple but useful enhancements that can be applied to your distill website. From enhancing your table of contents tab to adding a 'copy to clipboard button' in source code chunks, learn how you can make your distill website even more awesome!",
    "author": [
      {
        "name": "Jewel Johnson",
        "url": "https://jeweljohnsonj.github.io/jeweljohnson.github.io/"
      }
    ],
    "date": "2021-12-19",
    "categories": [
      "distill"
    ],
    "contents": "\n\nContents\nQuality of life mods for distill websites\n1. Making the table of contents more useful\n2. Adding a visitor counter\n3. Adding next/previous button\n4. Having social media share buttons\n5. Adding last updated date in the appendix\n6. Displaying your twitter feed\n7. Changing overflow to contain elements within the article body\n8. Copy to clipboard button in source code chunks\nSummary\nLast updated on\nAcknowledgments\nReferences\n\n\n\n\n\n\n\nQuality of life mods for distill websites\nIn my one month time of learning about the distill r-package, I was fascinated by how amazing it is. Without knowing much about HTML or CSS coding, using the distill package, one can build a website from scratch. What was even more amazing was that the package had an active and friendly community who have written excellent and easy to follow tutorials aiming at beginners like me. Almost everything I know about the distill package was thanks to these tutorials. Along the way, I also learned how to implement a few interesting features that can make a distill website even better. As a thank you for all the help I have received from this community, I would like to share some of my findings that might prove useful. Most of these findings are born out of curiosity coupled with Google search and from the source codes of the brilliant websites featured in the distill website showcase.\n1. Making the table of contents more useful\nIf you had used the Rmarkdown package for making websites before you began using the distill package, one thing you will immediately appreciate is the ‘table of contents (toc)’ in Rmarkdown. Personally, I feel that the toc in Rmarkdown is better than the toc in distill. The purpose of a toc is for enabling quick navigation through the contents of an article via the headers, so the toc should always be accessible to the reader. In distill articles however, because of the way they manage the layout of the figures and other elements, a floating toc that is fixed even while scrolling is not possible out of the box. This issue has been raised in GitHub and hopefully, the developers will find an elegant way to reimagine the toc. Nevertheless, all is not lost, from a stack overflow question on having a floating fixed toc for distill articles, the answer by Dr Rich Pauloo provides relief. The code provided by Dr Pauloo allows the toc to be fixed on the left side even when you scroll down. But the down side is that by doing so, the toc will overlap over any element which is extending over the body layout. Also, the default font for the toc in distill is too small I feel, so if you increase the font size while using this code, it will create even more overlapping. So what can be done?\nOne thing I thought of implementing was that I will use the code by Dr Pauloo and fix the toc on top-left but with a transparent background. But when I hover over the toc headers it should zoom in on the screen, making the font bigger but over a white background, so that it is more legible. I used white colour as that was my background colour in the article body. I also changed the scrolling behaviour from ‘smooth’ to ‘auto’ as it made navigating via toc snappier and more responsive.\nIf you are adamant about having a fixed toc like me then you just have to tolerate the overlap problem. Another issue is that by using this code, when your website is viewed on mobile devices, the toc overlaps with the main text. But apart from that, I did not find any other major issues. The modified code is given below.\nEither insert this code in your main theme CSS file, if you are using a custom theme for your distill website. Otherwise, make this as a separate .css file and insert it in the article where you want to implement this feature.\n\nhtml {\n  scroll-behavior: auto;\n}\nd-article {\n    contain: none;\n}\n\n/* the value in left: will allow you to change the left edge gap */\n/* try using the value I have provided and check if the text goes beyond */\n/* the edge of the screen when you hover over using the mouse pointer */\n/* otherwise modify the values till you get desirable result */\n\n#TOC {\n  position: fixed;\n  z-index: 50;\n  background: none; /* makes the toc background layer transparent */    \n  left: 1.5em; /* changes the left edge gap */\n  top: 6em; /* changes the top edge gap */\n}\n\n.d-contents nav a:hover {\n    color: black;\n    transform: scale(1.7); /* change scale to control hover zoom, now it is in 1:7 ratio */\n    padding-left:20%; /* change percentage value to control left gap during hover */\n    background-color: white; /* background colour on hover, kept as white as it is my bg colour */\n    display: block; /* keep it as block to station the text on hover */\n}\n\n/* Hide the ToC when resized to mobile or tablet:  480px, 768px, 900px */\n@media screen and (max-width: 900px) {\n#TOC {\n    position: relative;\n  }\n}\n\nhtml {\n  scroll-behavior: auto;\n}\nd-article {\n    contain: none;\n}\n\n/* the value in left: will allow you to change the left edge gap */\n/* try using the value I have provided and check if the text goes beyond */\n/* the edge of the screen when you hover over using the mouse pointer */\n/* otherwise modify the values till you get desirable result */\n\n#TOC {\n  position: fixed;\n  z-index: 50;\n  background: none; /* makes the toc background layer transparent */    \n  left: 1.5em; /* changes the left edge gap */\n  top: 6em; /* changes the top edge gap */\n}\n\n.d-contents nav a:hover {\n    color: black;\n    transform: scale(1.7); /* change scale to control hover zoom, now it is in 1:7 ratio */\n    padding-left:20%; /* change percentage value to control left gap during hover */\n    background-color: white; /* background colour on hover, kept as white as it is my bg colour */\n    display: block; /* keep it as block to station the text on hover */\n}\n\n/* Hide the ToC when resized to mobile or tablet:  480px, 768px, 900px */\n@media screen and (max-width: 900px) {\n#TOC {\n    position: relative;\n  }\n}\n\nFor inserting multiple CSS files use the following code.\n\n---\ntitle: \"Untitled\"\ndate: \"`r Sys.Date()`\"\noutput: distill::distill_article\ncss: [style.css, hover.css] #the hover.css file will be containing the above modified code\n---\n\nIf done properly, you will have a toc just like mine, which is shown on the left side of this page. If you come across any problems while implementing this feature please put them as a comment below this article. I will do my best to solve them.\n2. Adding a visitor counter\nIf you fancy a visitor counter on your website and additionally you would also like to know information like the location data of your visitors, how many people are currently online viewing your website etc. then you can add an HTML widget to your page which shows the visitor count. This can be done by following the steps below.\nVisit https://www.freecounterstat.com/ and click on ‘originals’. I chose this website as it requires no annoying sign-in or account creation. Plus it is a free service.\n\n\n\nFigure 1: Figure from the Front page of https://www.freecounterstat.com/\n\n\n\nPick the theme you like and customize the widget till you are content. Add relevant details like location, category of your website etc and remember to pick the ‘standard’ layout if you want the counter to be displayed horizontally. The difference between hit counter and visitor counter is that the hit counter only tracks visits for the page it is installed on whereas the visitor counter tracks all users who have visited any of your pages on your website. So select the ‘visitor counter’. You can either make the stats public or private, choose public as it also allows the readers to see your visitor data. Then finally prove that ‘you are not a robot’ and press ‘submit query’.\n\n\n\nFigure 2: Customizing your widget, Figure from the Front page of https://www.freecounterstat.com/\n\n\n\nThe first code shown inside the red rectangle in the figure below has a javascript code that allows you to access various interesting information about the visitors to your webpage. Copy the first code.\n\n\n\nFigure 3: The code for the visitor counter widget, Figure from https://www.freecounterstat.com/\n\n\n\nInsert the copied code which displays the widget in your distill article of liking. For example, the code below will place the counter in the centre of the distill article and will have ‘visitors’ written above it. Paste the code that you copied between the <center> tags before and after the <div> tags as shown below. You can take a look at my file for reference. If done properly you will have the visitor counter widget placed in the centre position like in this page.\n<center>Visitors<center>\n<center>\n/* paste the code you copied here */\n<\/div><center>\n3. Adding next/previous button\nIf you are making a tutorial and have sequential sections or chapters, then you might need navigation buttons at the end of each chapter for easy navigation. In the picture below you can see that I used it for my R tutorial articles. Have a look at my file for reference.\n\n\n\nFigure 4: Source: https://jeweljohnsonj.github.io/jeweljohnson.github.io/project1.html\n\n\n\nUse the following code inside your distill article to get navigation buttons at the end of your page. Change the href values to your respective html files and change the text accordingly for right and left sided buttons\n<br> \n\n<a href=\"project3.html\" class=\"btn button_round\" style=\"float: right;\">Next chapter:\n<br> 3. Even more customizations in ggplot2<\/a>\n\n<a href=\"project1.html\" class=\"btn button_round\" style=\"float: left;\">Previous chapter:\n<br> 1. Data visualization using ggplot2<\/a>\nYou should also add the following code to your main CSS theme file. You can change the values in the code to modify the button as you like.\n\n/* next and previous buttons at the end of the article */\n\n.btn {\n  border: none; /* button border */\n  background-color: #000000; /* button background colour */\n  padding: 14px 28px; /* length and width of the button */\n  font-size: 16px; /* font size of text inside the button */\n  cursor: pointer;\n  display: inline-block;\n}\n\n.button_round {border-radius: 12px;}\n\n/* next and previous buttons at the end of the article */\n\n.btn {\n  border: none; /* button border */\n  background-color: #000000; /* button background colour */\n  padding: 14px 28px; /* length and width of the button */\n  font-size: 16px; /* font size of text inside the button */\n  cursor: pointer;\n  display: inline-block;\n}\n\n.button_round {border-radius: 12px;}\n\n\n4. Having social media share buttons\nYou can display social media share buttons for easy sharing of your articles, like what I have, on the right side of this webpage.\nVisit https://www.addtoany.com/buttons/for/website and fill up the relevant details and get your html code. The reason for choosing this website over others was that you could use their service for free without signing up for an account.\nThen simply paste that code directly anywhere in your distill article to enable the share buttons.\nHave a look at my file for reference.\n\n\n\nFigure 5: Source: https://www.addtoany.com/buttons/for/website\n\n\n\n5. Adding last updated date in the appendix\nShowing when your article was last updated can prove useful for returning visitors. As it will allow them to see that the article has been modified. You can include this information in the appendix using the code below. Insert this code directly to your distill article.\n## Last updated on {.appendix}\n```{r,echo=FALSE}\nSys.time()\n```\nNow, this might not be very elegant, but it gets the job done in just one line of code. There is a more elegant way of including the “last updated date” in the appendix as explained by Dr Danielle Navarro. You can read more about it here. But it requires setting up a few prerequisites.\n6. Displaying your twitter feed\nIf you want to display your tweet activity on your webpage then follow the steps below.\nFirst go to your Twitter profile and copy your Twitter profile link address. Then visit https://publish.twitter.com/#. Your profile link would look like this -> 'https://twitter.com/[YOUR TWITTER USERNAME]\nPaste the link that you have copied on the input bar and press enter.\nSelect the ‘embedded timeline’ for showcasing the live feed of your Twitter activity and then copy the HTML widget code.\nNow you can insert the code directly anywhere on any distill page. When done correctly you will get your own widget like mine as shown below.\nTweets by jeweljohnsonj\nI placed my Twitter feed on the blog page where my posts are listed. By following the guide from the distill package tutorial, which allows one to add custom HTML files to the side section of a page, I was able to place the twitter feed on the right side of my blog page.\nTo do the same, first, open a text file in R Studio and using the template code below, paste the HTML code that you copied between the <div> tags in the code.\n<div class=\"sidebar-section custom\">\n  <!--place the code here -->\n \n<\/div>\nThen save the file as twitter.html (or in any name you like but save as an HTML file) and then include it in the distill blog list page by modifying your collection section in your _site.yml file, like shown below.\n\n\ncollections:\n  posts:\n    custom: twitter.html #the html file containing the twitter feed widget code, add this code\n\n\n\nHave a look at my file for reference. If done properly you are now the proud owner of a Twitter feed widget in your distill website. Good job!\n7. Changing overflow to contain elements within the article body\nSometimes you will have text in your code chunks that will go over the boundary of your article body. This is especially true if you add comments to your codes in the code chunks. You can see in the picture below, the earlier version of this page that you are viewing did not have the text contained within the article body, which made it messy to read at one time. But fear not! you can use the overflow property in CSS to fix this issue. When properly implemented it will convert the code chunks containing long text into a scrollable window chunk. Add the code below to your main CSS theme file. This code was inspired by the source codes of Dr Joel Nitta’s website.\n\n/* making code chunks with scroll bar */\n\n/* the code below will change output chunk properties */\nd-article pre { \n  border-radius: 5px; /* rounded chunk window*/\n  font-size: 12px; /* output text size */\n  color: black; /* output text colour */\n  background-color: #F5F5F5; /* output chunk background colour */\n  padding: 5px 5px 5px 18px; /* top,right,bottom,left padding values */\n  overflow: auto !important; /* enables scroll bar */ \n}\n\n/* the code below will change source code chunk properties */\nd-article div.sourceCode pre { \n  border-radius: 5px;\n  background-color: #F8F8FF;\n  color: black;\n  padding: 5px 5px 5px 18px;\n  overflow: auto !important;\n}\n\n/* making code chunks with scroll bar */\n\n/* the code below will change output chunk properties */\nd-article pre { \n  border-radius: 5px; /* rounded chunk window*/\n  font-size: 12px; /* output text size */\n  color: black; /* output text colour */\n  background-color: #F5F5F5; /* output chunk background colour */\n  padding: 5px 5px 5px 18px; /* top,right,bottom,left padding values */\n  overflow: auto !important; /* enables scroll bar */ \n}\n\n/* the code below will change source code chunk properties */\nd-article div.sourceCode pre { \n  border-radius: 5px;\n  background-color: #F8F8FF;\n  color: black;\n  padding: 5px 5px 5px 18px;\n  overflow: auto !important;\n}\n\n\n\nBefore overflow change\n\nBefore changing the overflow property, the comments in the code chuks overflowed the article body\n\n\n\n\nFigure 6: Earlier version of this page\n\n\n\nAfter overflow change\n\nAfter changing the overflow property, the comments in the code chunks are contained inside the code chunk via a scrollable window.\n\n\n\n\nFigure 7: Current version of this page\n\n\n\n\n\n8. Copy to clipboard button in source code chunks\nGone are the days of dragging your mouse pointer to select text. A copy to clipboard button on your source code chunk will make everyone’s life easy by allowing one to copy the whole code in the chunk window with a single click. This is extremely useful if you are making tutorial articles or learning materials for a course, where there is a high chance that students will want to copy and use your code. So for implementing the copy to clipboard button, follow the steps below.\nYou will need the xaringanExtra and htmltools packages installed in your R library to make this work. If you have not installed the packages then run the code shown below.\n\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"gadenbuie/xaringanExtra\")\ninstall.packages(\"htmltools\")\n\n\n\nThen simply insert the code shown below directly to anywhere in your distill article. If you want to customize your icons then visit https://fontawesome.com/v4.7/icons/ and choose the icon of your liking, then change fa-ICON NAME in the code below. For example, changing ‘fa-clone’ to ‘fa-coffee’ will give a coffee cup icon as the copy to clipboard button. Also change the hex code in color: to the colour of your liking. If done properly you will see a ‘copy’ button on the top-right position of your source code chunk.\n```{r, xaringanExtra-clipboard, echo=FALSE}\nhtmltools::tagList(\n  xaringanExtra::use_clipboard(\n    button_text = \"<i class=\\\"fa fa-clone fa-2x\\\" style=\\\"color: #301e64\\\"><\/i>\",\n    success_text = \"<i class=\\\"fa fa-check fa-2x\\\" style=\\\"color: #90BE6D\\\"><\/i>\",\n    error_text = \"<i class=\\\"fa fa-times fa-2x\\\" style=\\\"color: #F94144\\\"><\/i>\"\n  ),\n  rmarkdown::html_dependency_font_awesome()\n)\n```\nSummary\nSo in short in this article we have learned;\nHow to modify the toc to have it fixed on the left side and zoom in on hover\nHow to add a visitor counter\nHow to add navigation buttons at the end of the page\nHow to add social media share buttons\nHow to add last updated date in the appendix\nHow to display your Twitter feed on your distill website\nHow to add a scrolling code chunk window\nHow to add a copy to clipboard button in source code chunk\nI hope this was useful and in case you come across some problem while implementing these features, please specify them in the comments. I will try my best to fix them. In case if anyone is wondering how I was able to make panel sets within this webpage just follow this amazing tutorial guide. They are features from the xaringanExtra r-package. Thanks!\nLast updated on\n\n[1] \"2021-12-21 11:58:13 IST\"\n\nAcknowledgments\nI would like to thank Awanti Shastri for taking her valuable time to proofread this article. I also appreciate the valuable feedback and suggestions she gave for this article.\nReferences\nThe stackoverflow question on fixed toc in distill articles: https://stackoverflow.com/questions/67323162/floating-toc-in-distill-for-r/67387516?noredirect=1#comment119140135_67387516\nVisiter counter source: https://www.freecounterstat.com/\nSocial media share buttons source: https://www.addtoany.com/buttons/for/website\nTwitter feed widget source: https://publish.twitter.com/#\nFor changing the icons visit: https://fontawesome.com/v4.7/icons/\nFor implementing panelsets in distill articles: https://pkg.garrickadenbuie.com/xaringanExtra/#/panelset\nJJ Allaire, Rich Iannone, Alison Presmanes Hill and Yihui Xie (2021). distill: ‘R Markdown’ Format for Scientific and Technical Writing. R package version 1.3. https://CRAN.R-project.org/package=distill\nGarrick Aden-Buie and Matthew T. Warkentin (2021). xaringanExtra: Extras And Extensions for Xaringan Slides. R package version 0.5.5. https://github.com/gadenbuie/xaringanExtra\n\n\n\n\n\n\n\n\n\n\n\nvar a2a_config = a2a_config || {};\na2a_config.onclick = 1;\n\n\n\n",
    "preview": "posts/2021-12-18-quality-of-life-modifications-for-your-distill-webistes/meme.gif",
    "last_modified": "2021-12-21T11:58:14+05:30",
    "input_file": "quality-of-life-modifications-for-your-distill-webistes.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to One-carat Blog!",
    "description": "Welcome to One-carat Blog! Get to know the story behing this blog's creation.",
    "author": [
      {
        "name": "Jewel Johnson",
        "url": "https://jeweljohnsonj.github.io/jeweljohnson.github.io/"
      }
    ],
    "date": "2021-12-17",
    "categories": [
      "distill"
    ],
    "contents": "\nMaking of One-carat Blog\nMy name is Jewel Johnson and this is my story of how this blog was created. I wanted to have a space to share what I learned over time and that was one of the main reasons behind creating this blog. I will mostly write science articles that are focused on making complex information available to the public. Science communication is very important as it helps in making the public well informed about the advances in science. I am also an R enthusiast and therefore I will also be writing about R programming in this blog. I have already made tutorials describing how to use ggplot2, tidyr and dplyr packages in R for beginners. Overall this blog is still in its infancy and there is a lot of work to be done.\nHow was this blog made?\nI never thought that I will be making this blog when I started my venture to write science articles. Initially, I thought I will write articles on medium.com. But soon I scrapped that idea for two main reasons. The first reason was that The Medium is a paid and subscription-based service which will limit the reach of my articles. Most articles in the medium are mediocre and filled with click baits and is a waste of time. When I looked at some of the R programming articles in medium, most of them are plagiarized from the r-package websites and other tutorial websites. The second reason was medium is not a platform for writing coding oriented articles. There is no syntax support for programming languages and it is cumbersome to work with it. These reasons swayed me to look for alternatives.\nThe first choice was ‘blogger’ from Google, but again it was not an elegant solution. That is when I learned about markdown files and how you can build a website with them. Now a website or blog needs three things for it to work. It needs a hosting service, a domain address and content. You can always make content on your own, it is limited by the creator. But you will be mostly spending money on hosting services for physical storage and a domain address for making your website available online. Now money is a problem for me, at least right now. So this is when I learned that you can host your website using GitHub, which was just amazing.\nSo my journey began from using markdown and GitHub. But again markdown was not a very good choice for coding oriented articles. Also since I use R it is just cumbersome to copy-paste both the code as well as its output each and whenever I write some R code. But again all was not lost. From ‘markdown’, I began my journey to ‘Rmarkdown’. Now Rmarkdown was everything I wanted to have. So I had made my first website using the Rmarkdown package in R and hosted it in GitHub. But again as you get to know something well you will also understand its limitations. Rmarkdown is an easy to use package which can be used to make amazing pdf and HTML pages. But it had its limitations in customisations and other features. So after some research, I found two other packages in R which can serve my goal.\nThe first was the distill package in R. Now coming from Rmakrdown to distill I soon began to appreciate its features. Distill is like the savvy sibling of Rmarkdown, which offered a lot of features out of the box and had an active developer community. The second package I learned about was blogdown. Now, blogdown has everything you can ask for while making a website. The websites created using the blogdown package was top-notch and professional but it was heavily dependent on a third-party service called Hugothemes. This made me select distill over blogdown and I have been enjoying the distill package very much. Also distill was first published just two years ago. It has miles to go in terms of improvements but has high potential. I began learning about distill package on Nov 26, 2021, and since then I have been working on improving my blog using it. I want to thank the wonderful team behind the development of the distill r-package and I also offer my gratitude to GitHub which is offering free hosting services which I am sure is very helpful to students like me.\nMy vision\nI want to use this blog to showcase my skills and promote science communication. I will be writing about some amazing research and advancements in the science community. I am confident that the skillet I garnered overtime for these efforts will surely help me for PhD in the future. With that, I warmly welcome you to my blog and I hope you have as much fun reading these articles, as I had while creating these articles. If you find some articles helpful and you can share them with your friends who might enjoy them as much as you did. This blog has no ads so it is a perfect place for reading. I will strive to put forward high-quality articles as I respect your time as a reader. Thanks for visiting and I wish you the best!\nLast updated on\n\n[1] \"2021-12-21 11:06:21 IST\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar a2a_config = a2a_config || {};\na2a_config.onclick = 1;\n\n\n\n",
    "preview": "posts/welcome/proud_of_you.gif",
    "last_modified": "2021-12-21T11:06:24+05:30",
    "input_file": {}
  }
]
