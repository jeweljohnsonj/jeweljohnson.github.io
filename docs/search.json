{
  "articles": [
    {
      "path": "about.html",
      "title": "Jewel Johnson",
      "author": [],
      "contents": "\n\n          \n          \n          One-carat Blog\n          \n          \n          Home\n          Blog\n          \n          \n          R Tutorials\n           \n          ▾\n          \n          \n          ggplot2\n          Chapter 1: Data visualization using ggplot2\n          Chapter 2: Customizing graphs in ggplot2\n          Chapter 3: Even more customizations in ggplot2\n          tidyr\n          Chapter 1: Data tidying using tidyr\n          \n          \n          About\n          CV\n          \n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Jewel Johnson\n            \n            \n              \n                \n                    \n                      \n                        Twitter\n                      \n                    \n                  \n                                    \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            \n            Bio\n            I did my Masters in Biological Sciences from Indian Institute of Science Education and Research Thiruvananthapuram (IISER-TVM). For my master thesis I studied the limits and adaptations of nocturnal vision in the Giant Honeybee (Apis dorsata) in Prof. Hema Somanathan’s lab. I have also worked with Asian Honeybee (Apis cerana) and the Greater Banded Hornet (Vespa tropica). Currently I am applying for a PhD.\n            \n            \n            Research Interests\n            I’m interested in behavioural ecology and visual ecology, particularly in insects. With climate change being one of the greatest problem before us I am also interested in studying the effect of climate change on animals and plants, and how do they adapt to these effects. Since most of my work were in social insects I am also interested in studying social behaviour.\n            \n            \n            Hobbies\n            R enthusiast and data visualization | Listening to instrumental music, mainly math-rock | Stamp and coin collection | Photography (check out some of my photos here) | Cycling and Trekking\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Jewel Johnson\n            \n            \n              \n                \n                                    \n                    \n                      Twitter\n                    \n                  \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              \n              Bio\n              I did my Masters in Biological Sciences from Indian Institute of Science Education and Research Thiruvananthapuram (IISER-TVM). For my master thesis I studied the limits and adaptations of nocturnal vision in the Giant Honeybee (Apis dorsata) in Prof. Hema Somanathan’s lab. I have also worked with Asian Honeybee (Apis cerana) and the Greater Banded Hornet (Vespa tropica). Currently I am applying for a PhD.\n              \n              \n              Research Interests\n              I’m interested in behavioural ecology and visual ecology, particularly in insects. With climate change being one of the greatest problem before us I am also interested in studying the effect of climate change on animals and plants, and how do they adapt to these effects. Since most of my work were in social insects I am also interested in studying social behaviour.\n              \n              \n              Hobbies\n              R enthusiast and data visualization | Listening to instrumental music, mainly math-rock | Stamp and coin collection | Photography (check out some of my photos here) | Cycling and Trekking\n              \n            \n        \n      \n    \n\n    \n    \n    \n      © Copyright 2021 Jewel Johnson\n      This webiste was created using the distill R-package.\n      \n      \n\n  \n  ",
      "last_modified": "2021-12-11T09:38:49+05:30"
    },
    {
      "path": "blog_posts.html",
      "title": "Blog Posts",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-12-11T09:38:49+05:30"
    },
    {
      "path": "index.html",
      "title": "Hello World!",
      "author": [],
      "contents": "\n\n\n\nAnimation by Dr. Rich Pauloo\n\nWelcome to my blog! My name is Jewel Johnson. In this blog you will find cool science literature and R language articles. So give this blog a try and let me know how it is! Thanks for visiting. Have a good day!\n\n\n",
      "last_modified": "2021-12-11T09:38:50+05:30"
    },
    {
      "path": "project1.html",
      "title": "Chapter 1: Data visualization using ggplot2",
      "description": "Learn how to plot different types of graphs using the ggplot2 package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nIntroduction to ggplot2 package\nSetting up the prerequisites\n1. Bar graph\n2. Histogram\n3. Line graph\n4. Scatter plot\n5. Density Plot\n6. Dot-plot\n7. Rug-plot\n8. Box plot\n9. Violin plot\n\nSaving you ggplot2 graphs\nSummary\nReferences\n\nIntroduction to ggplot2 package\nIn this chapter we will be plotting different types of graphs using a package called ggplot2 in R. The ggplot2 package is based on ‘grammar of graphics plot’ which provides a systematic way of doing data visualizations in R. With a few lines of code you can plot a simple graph and by adding more layers onto it you can create complex yet elegant data visualizations. The package was created and developed by Dr. Hadley Wickham.\nA ggplot2 graph is made up of three components.\nData: Data of your choice that you want to visually summarise.\nGeometry or geoms: Geometry dictates the type of graph that you want to plot and this information is conveyed to ggplot2 through the geom() command code. For e.g. using the geom_boxplot() command, you can plot a box plot with your data. Likewise, there are many types of geometry that you can plot using the ggplot2 package.\nAesthetic mappings: Aesthetics define the different kinds of information that you want to include in the plot. One fo the most important aesthetic is in choosing which data values to plot on the x-axis and the y-axis. Another example is changing the colour of the data points, which can be used to differentiate two different categories in the data. The use of aesthetics depends on the geometry that you are using. We use the command aes() for adding different types of aesthetics to the plot. We will learn more about aes() in Chapter 2.\nThis tutorial is primarily focused on students who are beginners in R programming and wants to quickly plot their data without much of a hassle. So without further ado let’s plot some graphs!\nSetting up the prerequisites\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R.\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 package we use the following lines of command.\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nAll right we have the ggplot2 package loaded, now we just need some data to plot. Most R programming tutorials use the iris dataset as an example. But this tutorial won’t be like most tutorials. So let me introduce you to some lovely penguins from Palmer Station in Antarctica!\nFor this tutorial, we will be installing the palmerpenguins package which showcases body measurements taken from three different species of penguins from Antarctica. This package was made possible by the efforts of Dr. Allison Horst. The penguin data was collected by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER.\nInstall the palmerpenguins package and load it in R.\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\nNow there are two datasets in this package. We will be using the penguins dataset which is a simplified version of the raw data present in the package.\nUse the command head() to display the first few values of penguins dataset to see how it looks like\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n\n\n\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nWe can see that are 8 columns in the dataset representing different values. Now let us try plotting some graphs with this data.\n1. Bar graph\nSo we will try to plot a simple bar graph first. Bar graphs are used to represent categorical data where the height of the rectangular bar represents the value for that category. We will plot a bargraph representing frequency data for all three species of penguins.\nWe will be using the geom_bar() command to plot the bar graph. Let us also use the command theme_bw() for a nice looking theme.\n\nggplot(data = penguins, aes(x = species, fill = species)) + \n  xlab(\"Species\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for each species\") + \n  geom_bar() + theme_bw()\n\n\n2. Histogram\nHistograms are similar to bar graphs visually. But histograms are used to represent continuous data. Also the all the rectangular bars will have the same bin size or width.\nWe can plot a histogram using the command geom_histogram().\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for respective body mass\") + \n  geom_histogram(bins = 25) + theme_bw()\nWarning: Removed 2 rows containing non-finite values (stat_bin).\n\n\nThe warning message indicates that for two rows in the dataset, they have NA values or that they did not have any values present. This is true for real-life cases, as during data collection sometimes you will be unable to collect data due to various reasons. So this is perfectly fine.\n3. Line graph\nLine graph simply joins together data points to show overall distribution.\nUse the command geom_line() for plotting a line graph.\n\nggplot(data = penguins, aes(x = bill_length_mm, \n                            y = bill_depth_mm, colour = species)) + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  ggtitle(\"Bill length vs Bill depth\") + geom_line() + theme_bw()\n\n\n4. Scatter plot\nThe scatter plot simply denotes the data points in the dataset.\nUse the command geom_point() to plot a scatter plot.\n\nggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                            shape = species, colour = species)) + \n  xlab(\"Body mass (g)\") + ylab(\"Flipper length (mm)\") + \n  ggtitle(\"Body mass vs Filpper length\") + geom_point(size = 2) + theme_bw()\n\n\n5. Density Plot\nDensity plots are similar to histograms but show it shows the overall distribution of the data in a finer way. This way we will get a bell-shaped curve if our data follows a normal distribution.\nUse the command geom_density() to a density plot.\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Density\") + ggtitle(\"Body mass distribution\") + \n  geom_density() + theme_bw()\n\n\nSince we plotted for all three species the graph looks clustered. Let us try plotting the same graph for only gentoo penguins. We will use the dplyr package to filter() data for gentoo penguins alone. The dplyr package comes in-built with R so just load the dplyr package using the command library(). The dplyr package was also developed by Dr. Hadley Wickham.\n\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_density(fill = \"red\") + theme_bw()\n\n\n6. Dot-plot\nDot-plot is similar to a density plot but it shows discretely each data point in the distribution.\nUse the command geom_dotplot() to plot a dot-plot.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 100) + theme_bw()\n\n\n7. Rug-plot\nRug-plot is a simple way to visualize the distribution of data along the axis lines. It is often used in conjunction with other graphical representations.\nUse the command geom_rug() to plot a rug-plot.\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g, y = flipper_length_mm)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_point(colour = \"darkred\") + geom_rug() + theme_bw()\n\n\n8. Box plot\nBox-plot is one of the better ways of showing data via quartiles. You can learn more about box plots here.\nUse the command geom_boxplot() to plot a box-plot.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, colour = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + geom_boxplot() + \n  theme_bw()\n\n\n9. Violin plot\nViolin plot can be considered as the best of both a box-plot and a density plot. It shows the quartile values, like in a box-plot and also shows the distribution of the data, like in a density plot.\nUse the command geom_violin() in conjunction with geom_boxplot() to plot a violin plot.\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + geom_boxplot(width = 0.2) +\n  theme_bw()\n\n\nSaving you ggplot2 graphs\nUse the command ggsave() to save the graph locally. In the code below, ‘my_graph’ is the ggplot element containing your graph. The plot will be saved in your working directory.\n\nmy_graph <- ggplot(data = penguins, aes(x = species, y = body_mass_g,\n                                    fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + \n  geom_boxplot(width = 0.2) +\n  theme_bw()\n\n#to save the plot\nggsave(my_graph, filename = \"your_graph_name.png\", width = 20, height = 20,\n       units = \"cm\")\n\nSummary\nI hope this tutorial helped you to get familiarised with the ggplot2 commands. There are many more different types of graphs that you can plot using ggplot2. The tutorial only showed some of the commonly used ones. The best way to learn R is through actually doing it yourself. Try to recreate the examples given in this tutorial by yourself and then try what you learned with the different datasets available in R. Have a good day!\n\nNext chapter: 2. Customizing graphs in ggplot2\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n",
      "last_modified": "2021-12-11T09:38:57+05:30"
    },
    {
      "path": "project2.html",
      "title": "Chapter 2: Customizing graphs in ggplot2",
      "description": "Learn how to customize the aesthetics, labels and axes of a graph in ggplot2.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\n1. Setting up the prerequisites\n2. Building a plot\n1. Changing colour\n2. Changing point shape.\n3. Changing size\n4. Changing colour, shape and size manually\n5. Changing the opcaity of the elements\n6. Changing fill colour\n7. Changing line type\n8. Changing labels in the axes\n9. Tweaking the axes\n\nSummary\nReferences\n\nAfter Chapter 1 you must be familiar with the different types of graphs that you can plot using ggplot2. So for this tutorial, we will be learning how to customize those ggplot graphs to our liking. We will learn how to tweak the aesthetics, how to change labels and how to modify and change the axes in a graph.\nSo let us plot a graph from scratch and learn how to use different aesthetics available.\n1. Setting up the prerequisites\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R. For the dataset, we will first download the Stat2Data package which houses a lot of cool datasets. For this tutorial let us use the Hawks dataset which showcases body measurements from three different species of Hawks. This data was collected by students and faculty at Cornell College in Mount Vernon and the dataset was made available by late Prof. Bob Black at Cornell College.\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 and Stats2Data packages we use the following lines of command. Call the Hawks data using the data() command.\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"Stat2Data\")\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nLet us look at how the dataset is structured. Use str() command\n\nstr(Hawks)\n\n\n\n\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"classes\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"first_values\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Month\",\"2\":\"integer\",\"3\":\"9, 9, 9, 9, 9, 9\"},{\"1\":\"Day\",\"2\":\"integer\",\"3\":\"19, 22, 23, 23, 27, 28\"},{\"1\":\"Year\",\"2\":\"integer\",\"3\":\"1992, 1992, 1992, 1992, 1992, 1992\"},{\"1\":\"CaptureTime\",\"2\":\"integer\",\"3\":\"13:30, 10:30, 12:45, 10:50, 11:15, 11:25\"},{\"1\":\"ReleaseTime\",\"2\":\"integer\",\"3\":\",  ,  ,  ,  ,\"},{\"1\":\"BandNumber\",\"2\":\"integer\",\"3\":\"877-76317, 877-76318, 877-76319, 745-49508, 1253-98801, 1207-55910\"},{\"1\":\"Species\",\"2\":\"integer\",\"3\":\"RT, RT, RT, CH, SS, RT\"},{\"1\":\"Age\",\"2\":\"integer\",\"3\":\"I, I, I, I, I, I\"},{\"1\":\"Sex\",\"2\":\"integer\",\"3\":\", , , F, F,\"},{\"1\":\"Wing\",\"2\":\"double\",\"3\":\"385, 376, 381, 265, 205, 412\"},{\"1\":\"Weight\",\"2\":\"integer\",\"3\":\"920, 930, 990, 470, 170, 1090\"},{\"1\":\"Culmen\",\"2\":\"double\",\"3\":\"25.7, NA, 26.7, 18.7, 12.5, 28.5\"},{\"1\":\"Hallux\",\"2\":\"double\",\"3\":\"30.1, NA, 31.3, 23.5, 14.3, 32.2\"},{\"1\":\"Tail\",\"2\":\"integer\",\"3\":\"219, 221, 235, 220, 157, 230\"},{\"1\":\"StandardTail\",\"2\":\"integer\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"Tarsus\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"WingPitFat\",\"2\":\"integer\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"KeelFat\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"Crop\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nSo there is a lot of information in the dataset which we can use for plotting. So let us try plotting them.\n2. Building a plot\nOne thing to remember here is that how ggplot2 builds a graph is by adding layers. Let us start by plotting the basic layer first where the x-axis shows ‘weight of the hawks’ and the y-axis shows ‘wingspan of the hawks’.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing))\n\n\nWait a sec! Where are my data points? So right now if we look at the syntax of the ggplot code we can see that we have not told ggplot2 which geometry we want. Do we want a scatter plot or a histogram or any other type of graph? So let us plot a scatter plot first. Use geom_point() command. By adding geom_point() to the ggplot() command is equivalent to adding an extra layer to the already existing layer that we got previously. Let us also use theme_bw() for a nice looking theme.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + geom_point() + \n  theme_bw()\nWarning: Removed 11 rows containing missing values (geom_point).\n\n\nWe got the graph! but we also got a warning message. The warning message tells us that the dataset which we had used to plot the graph had 11 rows of NA values and which could not be plotted into the graph. In real-life cases, we can have datasets with NA values due to various reasons, so this is fine.\nNow, this graph even though shows us data points we are not sure which point belongs to which species, as this dataset contains data for three species of Hawks. So let us try giving different colours to the points concerning the different species so that we are able to differentiate them.\n1. Changing colour\nTo change colour of the ‘element’ with respect to species, we have to add colour = Species within the aes() of the ggplot command. I use the general term ‘element’ here to emphasize that the same change in aesthetics will work for most of other types of geometries in ggplot2 (something which you have seen extensively in Chapter 1. Like for a line graph, the ‘element’ would be lines, here our ‘element’ is point.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw()\n\n\nThe species abbreviations are the following: CH=Cooper’s, RT=Red-tailed, SS=Sharp-Shinned.\nNow, this graph is way better than the previous one.\n2. Changing point shape.\nNow instead of the colour let us change the shape of the point. Use shape() command in aes()\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, shape = Species)) + #instead of colour use shape.\n  geom_point() + theme_bw() \n\n\nNow we did change the shape of points but it is still hard to make out the difference. Let us try specifying colour along with the shape\nAdding both colour and shape in aesthetics\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, \n  colour = Species, shape = Species)) + geom_point() + theme_bw()\n\n\nThis plot is much better than the previous one.\nNow let us try specifying colour within the aes() of the geom()\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(aes(colour = Species)) + theme_bw()\n\n\nWe got the same graph as before! So what is the difference in specifying colour within aes() of ggplot() compared to the same but within geom(). Let us look at another example.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point() + theme_bw()\n\n\nI manually changed the colour of the points to red colour. Now let try specifying colour to the aes() within the geom()\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point(aes(colour = Species)) + theme_bw()\n\n\nYou can see that the red colour is overridden by other colours. So the aes() mapping (in this case colour) within geom() will override any aes() mapping within ggplot(). And whatever aes() mapping we give within ggplot() will be inherited by all geom() layers that will be added along with the ggplot() layer.\nLet us see another case.\n\n\nShow code\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(colour = \"darkred\") + theme_bw()\n\n\n\n\nShow code\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(aes(colour = \"darkred\")) + theme_bw()\n\n\nIf you compare both the codes, the only difference is that the colour = \"darkred\" command was outside aes() in the first code and inside aes() in the second code. So why didn’t the second graph have the same dark-red coloured points as the first one? The reason is that in the first code we are explicitly told to have all data points to be coloured dark-red but that is not the case with the second code. In the second code, since we have specified it inside aes(), ggplot is trying to look for a variable called “darkred” inside the dataset and colour it accordingly. This is why the legend that appears in the second graph has listed “darkred” as a category. And ggplot fails to find the variable called “darkred” but it still recognizes the colour command line and colour all the points in red. So the bottom line is that R has a pre-determined way of reading a code, so we users should well-understand what each line is expected to do and should not expect R to just fill it in accordingly to what we write.\nNow let us try a few other examples;\n3. Changing size\nUse size() in aes()\n\nggplot(data = Hawks, aes(x = Species, y = Hallux, size = Culmen)) + \n  geom_point() + theme_bw()\n\n\n4. Changing colour, shape and size manually\nUse scale_shape_manual() for changing shape, similarly scale_color_manual() for changing colour and scale_size_manual() for changing size of the element.\n\nggplot(data = Hawks, aes(x = Weight, y = Hallux, colour = Species,\n                         shape = Species, size = Species)) + \n  geom_point() +\n  scale_shape_manual(values=c(1, 2, 3)) +\n  scale_color_manual(values=c('red','blue', 'green')) +\n  scale_size_manual(values=c(1,5,10)) + theme_bw()\n\n\n\n\n\n5. Changing the opcaity of the elements\nUse alpha() within the geom() with a numeric value to change the opacity of the elements. This is useful for visualising large datasets such as this.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point(alpha = 1/5) + theme_bw()\n\n\nThe same commands also work for most of the other types of geom(). Now let us see a few other aesthetics in other types of geoms.\n6. Changing fill colour\nUse fill() in aes()\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_bw()\n\n\nUse scale_fill_manual() to manually change the colours.\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_bw() + \n  scale_fill_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\"))\n\n\n7. Changing line type\nUse linetype in aes()\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + theme_bw()\n\n\nYou can manually change line types using scale_linetype_manual()\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + \n  scale_linetype_manual(values= c(\"twodash\", \"longdash\", \"dotdash\")) +\n  theme_bw()\n\n\n\n\n\nNow let us also see how to change the labels in a graph.\n8. Changing labels in the axes\nUse xlab() to change x-axis title, ylab() to change y-axis title, ggtitle() with label and subtitle to add title and subtitle respectively.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + xlab(\"Weight (gm)\") + ylab(\"Wing (mm)\") +\n  ggtitle(label = \"Weight vs Wing span in three different species of Hawks\", \n          subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\")\n\n\nThe same result can be obtained by using labs() to specify each label in the graph. For renaming the legend title, the command will depend on what is there within the aes() or in other words what is the legend based on.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + labs(x = \"Weight (gm)\", y = \"Wing (mm)\", \n  title= \"Weight vs Wing span in three different species of Hawks\", \n  subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\",\n  caption = \"Source: Hawk dataset from Stat2Data r-package\", #caption for the graph\n  colour = \"Hawk Species\", # rename legend title\n  tag = \"A\") #figure tag\n\n\n9. Tweaking the axes\nUse xlim() and ylim() for limiting x and y axes respectively.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + xlim(c(0,1000)) + ylim(c(200,350))\n\n\nUse coord_cartesian() to zoom in on a particular area in the graph\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + coord_cartesian(xlim = c(0,1000),\n                                                   ylim = c(200,350))\n\n\nUse coord_flip() to flip the x and y axes.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + coord_flip()\n\n\nUse scale_x_continuous() for tweaking the x-axis. The same command work for the y-axis also. You can include label() inside the command to manually label the breaks of the axes.\n\n\nShow code\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + scale_x_continuous(breaks = c(0,1000,2000))\n\n\n\n\nShow code\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + \n  scale_x_continuous(breaks = c(0,1000,2000),label = c(\"low\", \"medium\", \"high\"))\n\n\nUse scale_y_reverse() to display the y values in the descending order. Same command applies to x-axis also.\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_bw() + scale_y_reverse()\n\n\nSummary\nIn this tutorial, we learned how to modify aesthetic present for different geoms in ggplot2. Then we learned how to modify labels in a graph and finally, we learned how to modify and change the axes elements. This tutorial is in no way exhaustive of the different ways you can modify a graph as there many more methods which are not discussed here. Instead of trying to include everything, this tutorial tries to be a stepping stone to help students of R to learn the basics of tweaking a graph. Try to practice what is covered here using other datasets available in the r-package Stat2Data. Have a good day my friend!\n\nNext chapter: 3. Even more customizations in ggplot2 Previous chapter: 1. Data visualization using ggplot2\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nAnn Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\n",
      "last_modified": "2021-12-11T09:39:11+05:30"
    },
    {
      "path": "project3.html",
      "title": "Chapter 3: Even more customizations in ggplot2",
      "description": "Learn how to customize the theme and colour palette of a graph in ggplot2.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nComplete themes\nThemes from ggthemes package\nChanging colour palettes in ggplot2\nviridis package\nwesanderson package\nggsci package\n\nCustomizing the theme()\n1. Customizing text elements using element_text()\n2. Customizing line elements using element_line()\n3. Customizing background elements using element_rect()\n\nSummary\nReferences\n\n\n\n\nIn this chapter, we will learn how to change the theme settings of a graph in ggplot2. The theme of a graph consists of non-data components present in your graph. This includes the different labels of the graph, fonts used, colour of axes, the background of the graph etc. By changing the theme we would not be changing or transforming how the data will look in the graph. Instead, we would only change the visual appearances in the graph and by doing so we can make it more aesthetically pleasing. Furthermore, we will see a few popular packages featuring ready to use themes. We will also learn about colour palettes and will see different packages associated with them.\nComplete themes\nThe ggplot2 package features ready to use themes called ‘complete themes’. So before we begin customizing themes, let us plot a few graphs and see how these themes look like. For the plots, I have used the BirdNest dataset from the Stat2Data package in R. The BirdNest dataset contains nest and species characteristics of North American passerines. The data was collected by Amy R. Moore, as a student at Grinnell College in 1999.\nGetting the BirdNest dataset and viewing how the dataset is structured.\n\ninstall.packages(\"Stat2Data\") #for installing Stat2Data package\ninstall.packages(\"ggplot2\") #for installing ggplot2 package\n\n#load the packages\nlibrary(Stat2Data)\nlibrary(ggplot2)\n\ndata(\"BirdNest\") #loading the BirdNest dataset\nstr(BirdNest) #for viewing structure of the dataset\n\n\n\n\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"classes\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"first_values\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Species\",\"2\":\"integer\",\"3\":\"Tyrannus tyrannus, Myiodynastes luteiventris, Myiarchus cinerascens, Myiarchus tyrannulus, Myarchus tuberculifer, Sayornis phoebe\"},{\"1\":\"Common\",\"2\":\"integer\",\"3\":\"Eastern Kingbird, Sulphur-bellied Flycatcher, Ash-thoated Flycatcher, Brown-crested Flycatcher, Dusky-capped Flycatcher, Eastern Phoebe\"},{\"1\":\"Page\",\"2\":\"integer\",\"3\":\"360, 368, 372, 372, 374, 378\"},{\"1\":\"Length\",\"2\":\"double\",\"3\":\"20, 20, 20, 22.5, 17, 17\"},{\"1\":\"Nesttype\",\"2\":\"integer\",\"3\":\"cup, cavity, cavity, cavity, cavity, cup\"},{\"1\":\"Location\",\"2\":\"integer\",\"3\":\"decid, decid, decid, decid, decid, bridge\"},{\"1\":\"No.eggs\",\"2\":\"double\",\"3\":\"3.5, 3.5, 4.5, 4.5, 4.5, 4.5\"},{\"1\":\"Color\",\"2\":\"integer\",\"3\":\"1, 1, 1, 1, 1, 0\"},{\"1\":\"Incubate\",\"2\":\"double\",\"3\":\"17, 15.5, 15, 14, 14, 16\"},{\"1\":\"Nestling\",\"2\":\"double\",\"3\":\"17, 17, 15, 16.5, 14, 15.5\"},{\"1\":\"Totcare\",\"2\":\"double\",\"3\":\"34, 32.5, 30, 30.5, 28, 31.5\"},{\"1\":\"Closed.\",\"2\":\"integer\",\"3\":\"0, 1, 1, 1, 1, 0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nSo we have plenty of variables to play with. The tabs shown below are named according to the theme used in the plots. The description for each theme is taken from ggplot2 tidyverse webpage.\n\n\ntheme_gray()\n\ntheme_gray(): The signature ggplot2 theme with a grey background and white gridlines, designed to put the data forward yet make comparisons easy.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_gray()\n\n\ntheme_bw()\n\ntheme_bw(): The classic dark-on-light ggplot2 theme. May work better for presentations displayed with a projector.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw()\n\n\ntheme_linedraw()\n\ntheme_linedraw(): A theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. Serves a purpose similar to theme_bw(). Note that this theme has some very thin lines (<< 1 pt) which some journals may refuse.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_linedraw()\n\n\ntheme_light()\n\ntheme_light(): A theme similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_light()\n\n\ntheme_dark()\n\ntheme_dark(): The dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin coloured lines pop out.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_dark()\n\n\ntheme_minimal()\n\ntheme_minimal(): A minimalistic theme with no background annotations.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_minimal()\n\n\ntheme_classic()\n\ntheme_classic(): A classic-looking theme, with x and y axis lines and no gridlines.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_classic()\n\n\ntheme_void()\n\ntheme_void(): A completely empty theme.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_void()\n\n\n\n\nThemes from ggthemes package\nIf you want even more pre-built themes then you can try the ggthemes package. This package was developed by Dr. Jeffrey B. Arnold.\n\n#install and load ggthemes package\ninstall.packages(\"ggthemes\")\nlibrary(ggthemes)\n\nThe tabs shown below are named after the themes present in ggthemes package. The description for each theme is taken from the ggthemes manual.\n\n\ntheme_base()\n\ntheme_base(): Theme similar to the default settings of the ‘base’ R graphics.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_base() + theme(text = element_text(size = 10)) #size is reduced to accommodate the graph in the tab\n\n\ntheme_calc()\n\ntheme_calc(): Theme similar to the default settings of LibreOffice Calc charts.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_calc()\n\n\ntheme_clean()\n\ntheme_clean(): Clean ggplot theme with no panel background, black axis lines and grey fill colour for chart elements.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_clean()\n\n\ntheme_economist()\n\ntheme_economist(): A theme that approximates the style of The Economist.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_economist()\n\n\ntheme_excel()\n\ntheme_excel(): Theme to replicate the ugly monstrosity that was the old gray-background Excel chart. Please never use this. This theme should be combined with the scale_colour_excel() color scale.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_excel()\n\n\ntheme_excel_new()\n\ntheme_excel_new(): Theme for ggplot2 that is similar to the default style of charts in current versions of Microsoft Excel.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_excel_new()\n\n\ntheme_few()\n\ntheme_few(): Theme based on the rules and examples from Stephen Few’s Show Me the Numbers and “Practical Rules for Using Color in Charts”.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_few()\n\n\ntheme_fivethirtyeight()\n\ntheme_fivethirtyeight(): Theme inspired by the plots on FiveThirtyEight plots\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_fivethirtyeight()\n\n\ntheme_foundation()\n\ntheme_foundation(): This theme is designed to be a foundation from which to build new themes, and not meant to be used directly. theme_foundation() is a complete theme with only minimal number of elements defined. It is easier to create new themes by extending this one rather than theme_gray() or theme_bw(), because those themes define elements deep in the hierarchy.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_foundation()\n\n\ntheme_gdocs()\n\ntheme_gdocs(): Theme similar to the default look of charts in Google Docs.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_gdocs() + theme(text = element_text(size = 10)) #size is reduced to accommodate the graph in the tab\n\n\ntheme_hc()\n\ntheme_hc(): Theme based on Highcharts plots\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_hc()\n\n\ntheme_igray()\n\ntheme_igray(): Theme with white panel and gray background.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_igray()\n\n\ntheme_map()\n\ntheme_map(): A clean theme that is good for displaying maps from geom_map().\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_map()\n\n\ntheme_pander()\n\ntheme_pander(): The pander ships with a default theme when the ’unify plots’ option is enabled via panderOptions, which is now also available outside of pander internals, like evals, eval.msgs or Pandoc.brew.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_pander()\n\n\ntheme_par()\n\ntheme_par(): Theme which uses the current ‘base’ graphics parameter values from par(). Not all par() parameters, are supported, and not all are relevant to ggplot2 themes.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_par() + theme(text = element_text(size = 9)) #size is reduced to accommodate the graph in the tab\n\n\ntheme_solarized()\n\ntheme_solarized(): See https://ethanschoonover.com/solarized/ for a description of the Solarized palette.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_solarized()\n\n\ntheme_solid()\n\ntheme_solid(): Theme with nothing other than a background color.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_solid()\n\n\ntheme_stata()\n\ntheme_stata(): Themes based on Stata graph schemes.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_stata()\n\n\ntheme_tufte()\n\ntheme_tufte(): Theme based on Chapter 6 ’Data-Ink Maximization and Graphical Design’ of Edward Tufte The Visual Display of Quantitative Information. No border, no axis lines, no grids. This theme works best in combination with geom_rug() or geom_rangeframe().\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_tufte()\n\n\ntheme_wsj()\n\ntheme_wsj(): Theme based on the plots in The Wall Street Journal\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_wsj() + theme(text = element_text(size = 6)) #size is reduced to accommodate the graph in the tab\n\n\n\n\nChanging colour palettes in ggplot2\nApart from ready to use themes, there are also ready to use colour palettes which we can use. A colour palette contains a set of pre-defined colours which will be applied to the different geometries present in a graph.\nChoosing a good colour palette is important as it helps us to represent data in a better way and at the same time, it also makes the graph easier to read for people with colour blindness. Let us see a few popular colour palette packages used in R.\nviridis package\nviridis package is a popularly used colour palette in R. It is aesthetically pleasing and well designed to improve readability for colour blind people. The virids package was developed by Bob Rudis, Noam Ross and Simon Garnier. There are eight different colour scales present in this package. The name of the tab denotes the colour scale present in this package.\n\n#load viridis colour package\nlibrary(viridis)\n\n\n\nviridis\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"viridis\")\n\n\nmagma\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"magma\")\n\n\nplasma\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"plasma\")\n\n\ninferno\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"inferno\")\n\n\ncividis\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"cividis\")\n\n\nmako\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"mako\")\n\n\nrocket\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"rocket\")\n\n\nturbo\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"turbo\")\n\n\n\n\nwesanderson package\nIf you like your colours distinctive and narrative, just like how American film-maker Mr. Wes Anderson would like it, then try the wesanderson package. Relive the The Grand Budapest Hotel moments through your graphs. The wesandreson package was developed by Karthik Ram. There are a total of 19 colour palettes present in this package. We will see a subset of them. All colour scales in this package are available here. The name of the tab denotes the colour scale used. The data used in this plot is the penguin dataset present in the package palmerpenguins.\n\n#install and load wesanderson and palmerpenguins package\ninstall.packages(\"wesanderson\")\ninstall.packages(\"palmerpenguins\")\nlibrary(wesanderson)\nlibrary(palmerpenguins)\ndata(\"penguins\") #load the penguins dataset\n\n\n\nGrandBudapest1\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"GrandBudapest1\", n = 3))\n\n\nBottleRocket2\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"BottleRocket2\", n = 3))\n\n\nRushmore1\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"Rushmore1\", n = 3))\n\n\nRoyal1\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"Royal1\", n = 3))\n\n\nZissou1\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"Zissou1\", n = 3))\n\n\nDarjeeling2\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"Darjeeling2\", n = 3))\n\n\nIsleofDogs1\n\n\nShow code\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  labs(x= \"Species\", y= \"Body mass (g)\",\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \n  theme_bw() + scale_fill_manual(values = wes_palette(\"IsleofDogs1\", n = 3))\n\n\n\n\nggsci package\nIf you want high-quality colour palettes reflecting scientific journal styles then you can try the ggsci package. The ggsci package was developed by Dr. Nan Xiao and Dr. Miaozhu Li. All colour scales in this package are available in package webpage. The descriptions of the colour scales were also taken from the package webpage. The name of the tab denotes the colour scale used.\n\n#load ggsci package\nlibrary(ggsci)\n\n\n\nscale_fill_npg()\n\nThe NPG palette is inspired by the plots in the journals published by Nature Publishing Group.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_npg()\n\n\nscale_fill_aaas()\n\nThe AAAS palette is inspired by the plots in the journals published by American Association for the Advancement of Science.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_aaas()\n\n\nscale_fill_nejm()\n\nThe NEJM palette is inspired by the plots in The New England Journal of Medicine.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_nejm()\n\n\nscale_fill_lancet()\n\nThe Lancet palette is inspired by the plots in Lancet journals, such as Lancet Oncology.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_lancet()\n\n\nscale_fill_jama()\n\nThe JAMA palette is inspired by the plots in The Journal of the American Medical Association.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_jama()\n\n\nscale_fill_jco()\n\nThe JCO palette is inspired by the the plots in Journal of Clinical Oncology.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_jco()\n\n\nscale_fill_ucscgb()\n\nThe UCSCGB palette is from the colors used by UCSC Genome Browser for representing chromosomes. This palette has been intensively used in visualizations produced by Circos.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_ucscgb()\n\n\nscale_fill_d3()\n\nThe D3 palette is from the categorical colors used by D3.js (version 3.x and before). There are four palette types (category10, category20, category20b, category20c) available.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_d3(palette = \"category10\")\n\n\nscale_fill_locuszoom()\n\nThe LocusZoom palette is based on the colors used by LocusZoom.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_locuszoom()\n\n\nscale_fill_igv()\n\nThe IGV palette is from the colors used by Integrative Genomics Viewer for representing chromosomes. There are two palette types (default, alternating) available.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_igv()\n\n\nscale_fill_uchicago()\n\nThe UChicago palette is based on the colors used by the University of Chicago. There are three palette types (default, light, dark) available.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_uchicago()\n\n\nscale_fill_startrek()\n\nThis palette is inspired by the (uniform) colors in Star Trek.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_startrek()\n\n\nscale_fill_tron()\n\nThis palette is inspired by the colors used in Tron Legacy. It is suitable for displaying data when using a dark theme.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_tron()\n\n\nscale_fill_futurama()\n\nThis palette is inspired by the colors used in the TV show Futurama.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_futurama()\n\n\nscale_fill_rickandmorty()\n\nThis palette is inspired by the colors used in the TV show Rick and Morty.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_rickandmorty()\n\n\nscale_fill_simpsons()\n\nThis palette is inspired by the colors used in the TV show The Simpsons.\n\n\n\nShow code\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\n  theme_bw() + scale_fill_simpsons()\n\n\n\n\nCustomizing the theme()\nA ggplot theme is made up of different elements and it’s functions. For e.g. plot.title() element allows you to modify the title of the graph using the element function element_text(). In this way, we can change the font size, font family, text colour etc. of the title of the plot. So let us begin customising our graph. We will be reusing the BirdNest dataset for the graphs.\n1. Customizing text elements using element_text()\nAll text elements can be customized using the element function element_text(). The syntax for element_text() is as follows\n\nelement_text(\n  family = NULL, #insert family font name, e.g. \"Times\"\n  face = NULL,  #font face (\"plain\", \"italic\", \"bold\", \"bold.italic\")\n  colour = NULL, #either from colours() or hex code inside \"\"\n  size = NULL, #text size (in pts)\n  hjust = NULL, #horizontal justification values 0 or 1\n  vjust = NULL, #vertical justification values 0 or 1\n  angle = NULL, #angle in degrees\n  lineheight = NULL, #distance between text and axis line\n  color = NULL, #same function as colour\n  margin = NULL,\n  debug = NULL,\n  inherit.blank = FALSE\n)\n\n\n\nBefore\n\n\nShow code\np <- ggplot(BirdNest, aes(No.eggs, Totcare, colour = Nesttype)) + geom_point() +\n    labs(x= \"Number of eggs\", y= \"Total care time (days)\",\n       title= \"Relationship between number of eggs and total care time\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\",\n       colour = \"Nest type\")\np\n\n\nAfter\n\n\nShow code\np <- ggplot(BirdNest, aes(No.eggs, Totcare, colour = Nesttype)) + geom_point() +\n    labs(x= \"Number of eggs\", y= \"Total care time (days)\",\n       title= \"Relationship between number of eggs and total care time\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\",\n       colour = \"Nest type\")\n\n#customizing text elements\np + theme(plot.title=element_text(size = 15,family = \"Comic Sans MS\",colour = \"darkred\",face = \"bold\"),\n          plot.subtitle=element_text(size = 10,family = \"Courier\",colour= \"blue\",face= \"italic\"),\n          plot.caption = element_text(size = 8,family = \"Times\",colour= \"green\",face=\"bold.italic\", hjust=0),\n          axis.text.x= element_text(size = 6,colour = \"magenta\", angle=20),\n          axis.text.y= element_text(size = 6,colour = \"darkblue\", angle=30),\n          axis.title.x = element_text(colour = \"orchid\"),\n          axis.title.y = element_text(colour = \"sienna\"),\n          legend.text = element_text(size = 8,colour = \"darkgreen\"),\n          legend.title = element_text(size = 10,colour = \"lightblue\",face = \"bold\"))\n\n\n\n\n2. Customizing line elements using element_line()\nLine elements include axes, grid lines, borders of the graph etc. All line elements can be customized using the element function element_line(). The syntax for element_line() is as follows\n\nelement_line(\n  colour = NULL, #either from colours() or hex code inside \"\"\n  size = NULL, #line size in mm units\n  linetype = NULL, # eg: dashed, dotted etc \n  lineend = NULL, #line end style (round, butt, square)\n  color = NULL, #same function as colour\n  arrow = NULL, #arrow specification\n  inherit.blank = FALSE\n)\n\n\n\nBefore\n\n\nShow code\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\np\n\n\nAfter\n\n\nShow code\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\n\n#customizing line elements\np + theme(panel.grid.major = element_line(colour = \"red\", size = 0.8, linetype = \"dashed\"),\n          panel.grid.minor = element_line(colour = \"blue\",linetype = \"twodash\"),\n          axis.line.x = element_line(colour = \"darkred\", arrow = arrow()),\n          axis.line.y = element_line(colour = \"darkblue\"),\n          axis.ticks = element_line(size = 5, colour = \"yellow\"),\n          axis.ticks.length.y=unit(0.5, \"cm\")) #ticks positioned 0.5cm away from y axis\n\n\n\n\n3. Customizing background elements using element_rect()\nBackground elements include plot, panel and legend backgrounds and their margins. All background elements can be customized using the element function element_rect(). The syntax for element_rect() is as follows\n\nelement_rect(\n  fill = NULL, #fills colour\n  colour = NULL, #colours the border\n  size = NULL, #changes border size in mm units\n  linetype = NULL, #changes border linetype\n  color = NULL,\n  inherit.blank = FALSE\n)\n\n\n\nBefore\n\n\nShow code\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\np\n\n\nAfter\n\n\nShow code\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\n       subtitle = \"Data shown for 84 different species of North American passerines\",\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\n\n#customizing line elements\np + theme(plot.background = element_rect(size = 5, colour = \"red\", fill = \"lightblue\"),\n          panel.background = element_rect(size = 3, colour = \"blue\", fill = \"lightyellow\", linetype = \"dotted\"),\n          legend.key = element_rect(fill = \"lightgreen\"),\n          legend.background = element_rect(fill = \"grey\"),\n          legend.key.size = unit(0.75, \"cm\"))\n\n\n\n\nSummary\nI hope you are now able to customize a theme of a graph with ease. In this chapter, we learned about different theme elements and how to customize them. We also saw different packages in R which featured ready to use themes. We learned about colour palettes and got introduced to the popular colour packages available R. With that being said, always make sure that your graphs are colour-blind friendly. Have a good day!\n\nPrevious chapter: 2. Customizing graphs in ggplot2\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nAnn Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\nJeffrey B. Arnold (2021). ggthemes: Extra Themes, Scales and Geoms for ‘ggplot2’. R package version 4.2.4. https://CRAN.R-project.org/package=ggthemes\nSimon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2021). Rvision - Colorblind-Friendly Color Maps for R. R package version 0.6.2. You can read more here.\nKarthik Ram and Hadley Wickham (2018). wesanderson: A Wes Anderson Palette Generator. R package version 0.3.6. https://CRAN.R-project.org/package=wesanderson\nNan Xiao (2018). ggsci: Scientific Journal and Sci-Fi Themed Color Palettes for ‘ggplot2’. R package version 2.9. https://CRAN.R-project.org/package=ggsci\n",
      "last_modified": "2021-12-11T09:39:54+05:30"
    },
    {
      "path": "project4.html",
      "title": "Chapter 1: Data tidying using tidyr",
      "description": "Learn how to make your data tidy with the tidyr package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nIntroduction to tidyr package\nWhat is tidy data?\ntidyr commands\npivot_longer()\npivot_wider()\n\nSummary\nReferences\n\nIntroduction to tidyr package\nRaw data might not be always in a usable form for any form of analysis or visualization processes. The tidyr package aims to help you in reshaping your data in a usable form. In short it helps you to ‘tidy’ up your data using various tools. In this chapter we will see how you can use the tidyr package to make your data tidy.\nWhat is tidy data?\nFirst, we need to understand what a tidy data looks like. For that let us imagine a scenario where you are a doctor who is trying find the best treatment for a disease . Now your colleagues have short-listed five different treatment methods and have reported their efficacy values when tested with five different patients. Now you are tasked with finding which of the five treatments is the best against the disease. You open your computer and you find the following data of the experiment.\n\n\n\n{\"columns\":[{\"label\":[\"trt\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient1\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient2\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient3\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient4\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient5\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"treatment1\",\"2\":\"1\",\"3\":\"6\",\"4\":\"11\",\"5\":\"16\",\"6\":\"21\"},{\"1\":\"treatment2\",\"2\":\"2\",\"3\":\"7\",\"4\":\"12\",\"5\":\"17\",\"6\":\"22\"},{\"1\":\"treatment3\",\"2\":\"3\",\"3\":\"8\",\"4\":\"13\",\"5\":\"18\",\"6\":\"23\"},{\"1\":\"treatment4\",\"2\":\"4\",\"3\":\"9\",\"4\":\"14\",\"5\":\"19\",\"6\":\"24\"},{\"1\":\"treatment5\",\"2\":\"5\",\"3\":\"10\",\"4\":\"15\",\"5\":\"20\",\"6\":\"25\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nThis is how often data is stored because it is easy to write it this way. In the first column you can see the different treatments from one to five. And in the second column you have the efficacy values of the treatments for patient 1 and it goes on for the other patients. Now this is a good example of how a dataset should not look like! Surprised? Let us see what makes this dataset ‘dirty’.\nYou can quickly notice that, there is no mentioning of what these numerical values mean. Of course we know that they are efficacy values for the different treatments. But for someone who only have this data as a reference, that person would not have a clue to what these numbers mean. Also note that each of the rows contains multiple observation values which is not a feature of a tidy data. These kind of data format is called as ‘wide data’ which we will talk more about later.\nWith that being said, a tidy data will have;\nEach of it’s variables represented in it’s own columns\nEach observation or a case in it’s own row.\nEach of the the rows will contain only a single value.\nSo let us see how the ‘tidier’ version of this data would look like.\n\n\n\n{\"columns\":[{\"label\":[\"treatment\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient_ID\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"efficacy\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"treatment1\",\"2\":\"patient1\",\"3\":\"1\"},{\"1\":\"treatment1\",\"2\":\"patient2\",\"3\":\"6\"},{\"1\":\"treatment1\",\"2\":\"patient3\",\"3\":\"11\"},{\"1\":\"treatment1\",\"2\":\"patient4\",\"3\":\"16\"},{\"1\":\"treatment1\",\"2\":\"patient5\",\"3\":\"21\"},{\"1\":\"treatment2\",\"2\":\"patient1\",\"3\":\"2\"},{\"1\":\"treatment2\",\"2\":\"patient2\",\"3\":\"7\"},{\"1\":\"treatment2\",\"2\":\"patient3\",\"3\":\"12\"},{\"1\":\"treatment2\",\"2\":\"patient4\",\"3\":\"17\"},{\"1\":\"treatment2\",\"2\":\"patient5\",\"3\":\"22\"},{\"1\":\"treatment3\",\"2\":\"patient1\",\"3\":\"3\"},{\"1\":\"treatment3\",\"2\":\"patient2\",\"3\":\"8\"},{\"1\":\"treatment3\",\"2\":\"patient3\",\"3\":\"13\"},{\"1\":\"treatment3\",\"2\":\"patient4\",\"3\":\"18\"},{\"1\":\"treatment3\",\"2\":\"patient5\",\"3\":\"23\"},{\"1\":\"treatment4\",\"2\":\"patient1\",\"3\":\"4\"},{\"1\":\"treatment4\",\"2\":\"patient2\",\"3\":\"9\"},{\"1\":\"treatment4\",\"2\":\"patient3\",\"3\":\"14\"},{\"1\":\"treatment4\",\"2\":\"patient4\",\"3\":\"19\"},{\"1\":\"treatment4\",\"2\":\"patient5\",\"3\":\"24\"},{\"1\":\"treatment5\",\"2\":\"patient1\",\"3\":\"5\"},{\"1\":\"treatment5\",\"2\":\"patient2\",\"3\":\"10\"},{\"1\":\"treatment5\",\"2\":\"patient3\",\"3\":\"15\"},{\"1\":\"treatment5\",\"2\":\"patient4\",\"3\":\"20\"},{\"1\":\"treatment5\",\"2\":\"patient5\",\"3\":\"25\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nYou can see each of columns represent only one type of variable. In the first column you have the types of treatments, followed by patient IDs and their efficacy values for each treatment. Also note that each row represent only one observation. So this kind of data format is what we strive to achieve by using the tidyr package and they are called as ‘long data’. So let us begin!\ntidyr commands\nThere are different sets of command which you can utilize to reshape your data and make it tidy. Let us each of these commands in action\npivot_longer()\nThe pivot_longer() command converts a ‘wide data’ to a ‘long data’. It does so by converting row names to a new column under a new variable name with its corresponding values moved into another column with another variable name. So let us see how it goes. We will take the earlier mentioned example and will see how to make it tidy. Now you don’t have to be concerned with the codes I have used to make the dummy data. Just have your focus on the pivot_longer() syntax.\n\n#making a dummy data\n#using sample function to pick random numbers in a sequence\npatient1 <- c(seq(1,5,1))\npatient2 <- c(seq(6,10,1))\npatient3 <- c(seq(11,15,1))\npatient4 <- c(seq(16,20,1))\npatient5 <- c(seq(21,25,1))\n\n#cbind simple combines the columns of same size\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \n\ntrt <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\n\ntrt_data <- cbind(trt, treatment_data)\ntrt_data <- as.data.frame(trt_data) #making it a data frame\n\ntrt_data_tidy <- pivot_longer(trt_data,\n                              c(patient1,patient2,patient3,patient4,patient5), \n                              names_to = \"patient_ID\", values_to = \"efficacy\")\ntrt_data_tidy\n\n\n\n\n{\"columns\":[{\"label\":[\"treatment\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient_ID\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"efficacy\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"treatment1\",\"2\":\"patient1\",\"3\":\"1\"},{\"1\":\"treatment1\",\"2\":\"patient2\",\"3\":\"6\"},{\"1\":\"treatment1\",\"2\":\"patient3\",\"3\":\"11\"},{\"1\":\"treatment1\",\"2\":\"patient4\",\"3\":\"16\"},{\"1\":\"treatment1\",\"2\":\"patient5\",\"3\":\"21\"},{\"1\":\"treatment2\",\"2\":\"patient1\",\"3\":\"2\"},{\"1\":\"treatment2\",\"2\":\"patient2\",\"3\":\"7\"},{\"1\":\"treatment2\",\"2\":\"patient3\",\"3\":\"12\"},{\"1\":\"treatment2\",\"2\":\"patient4\",\"3\":\"17\"},{\"1\":\"treatment2\",\"2\":\"patient5\",\"3\":\"22\"},{\"1\":\"treatment3\",\"2\":\"patient1\",\"3\":\"3\"},{\"1\":\"treatment3\",\"2\":\"patient2\",\"3\":\"8\"},{\"1\":\"treatment3\",\"2\":\"patient3\",\"3\":\"13\"},{\"1\":\"treatment3\",\"2\":\"patient4\",\"3\":\"18\"},{\"1\":\"treatment3\",\"2\":\"patient5\",\"3\":\"23\"},{\"1\":\"treatment4\",\"2\":\"patient1\",\"3\":\"4\"},{\"1\":\"treatment4\",\"2\":\"patient2\",\"3\":\"9\"},{\"1\":\"treatment4\",\"2\":\"patient3\",\"3\":\"14\"},{\"1\":\"treatment4\",\"2\":\"patient4\",\"3\":\"19\"},{\"1\":\"treatment4\",\"2\":\"patient5\",\"3\":\"24\"},{\"1\":\"treatment5\",\"2\":\"patient1\",\"3\":\"5\"},{\"1\":\"treatment5\",\"2\":\"patient2\",\"3\":\"10\"},{\"1\":\"treatment5\",\"2\":\"patient3\",\"3\":\"15\"},{\"1\":\"treatment5\",\"2\":\"patient4\",\"3\":\"20\"},{\"1\":\"treatment5\",\"2\":\"patient5\",\"3\":\"25\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nFurther more, you dont have manually type in the column names as you can use colnames() to call the column names of the dataset. Another way of doing the same is by excluding the first column from the process. By doing so the command will automatically pivot all columns except the excluded one, so in this way we don’t need to manually specify the column names. Codes given below will give you the same result as before.\n\npatient1 <- c(seq(1,5,1))\npatient2 <- c(seq(6,10,1))\npatient3 <- c(seq(11,15,1))\npatient4 <- c(seq(16,20,1))\npatient5 <- c(seq(21,25,1))\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \ntreatment <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\ntrt_data <- cbind(treatment, treatment_data)\ntrt_data <- as.data.frame(trt_data)\n#using colnames, [-1] is included to exclude the name of first column from the process\ntrt_data_tidy1 <- pivot_longer(trt_data,\n                              colnames(trt_data)[-1], \n                              names_to = \"patient_ID\", values_to = \"efficacy\")\n\n#the same can be done by manually specifying which columns to exclude\n#this can be done by denoting the column name ('treatment' in this case) with '-' sign\ntrt_data_tidy2 <- pivot_longer(trt_data, names_to = \"patient_ID\", values_to = \"efficacy\",\n                              -treatment)\n#checking if both the tidy datasets are one and the same\npaged_table(as.data.frame(trt_data_tidy1 == trt_data_tidy2), options = list(rows.print = 5))\n\n\n{\"columns\":[{\"label\":[\"treatment\"],\"name\":[1],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"patient_ID\"],\"name\":[2],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"efficacy\"],\"name\":[3],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"},{\"1\":\"TRUE\",\"2\":\"TRUE\",\"3\":\"TRUE\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[5],\"max\":[5]},\"pages\":{}}}\n  \n\nThe syntax for pivot_longer() is given below with description\n\npivot_longer(\"data\", c(\"colname1, colname2,.....\"), \n  names_to = \"name of the column where your row names are present\",\n  values_to = \"name of the column where your corresponding row values are present\")\n\nHere is a graphical representation\n\npivot_wider()\nThe pivot_wider() does the exact opposite of what pivot_longer() does, which is to convert a long data into wide data. We will use the earlier example.\n\n#making a dummy data\n#using sample function to pick random numbers in a sequence\npatient1 <- c(seq(1,5,1))\npatient2 <- c(seq(6,10,1))\npatient3 <- c(seq(11,15,1))\npatient4 <- c(seq(16,20,1))\npatient5 <- c(seq(21,25,1))\n\n#cbind simple combines the columns of same size\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \n\ntrt <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\n\ntrt_data <- cbind(trt, treatment_data)\ntrt_data <- as.data.frame(trt_data) #making it a data frame\n\ntrt_data_tidy <- pivot_longer(trt_data,\n                              c(patient1,patient2,patient3,patient4,patient5), \n                              names_to = \"patient_ID\", values_to = \"efficacy\")\n\n#making the data wide\ntrt_data_wider <- pivot_wider(trt_data_tidy, names_from = \"patient_ID\", values_from = \"efficacy\")\n#paged_Table() for viewing the dataset as a table, \n#you can see that the dataset is same as before\npaged_table(as.data.frame(trt_data_wider))\n\n\n{\"columns\":[{\"label\":[\"trt\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient1\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient2\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient3\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient4\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"patient5\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"treatment1\",\"2\":\"1\",\"3\":\"6\",\"4\":\"11\",\"5\":\"16\",\"6\":\"21\"},{\"1\":\"treatment2\",\"2\":\"2\",\"3\":\"7\",\"4\":\"12\",\"5\":\"17\",\"6\":\"22\"},{\"1\":\"treatment3\",\"2\":\"3\",\"3\":\"8\",\"4\":\"13\",\"5\":\"18\",\"6\":\"23\"},{\"1\":\"treatment4\",\"2\":\"4\",\"3\":\"9\",\"4\":\"14\",\"5\":\"19\",\"6\":\"24\"},{\"1\":\"treatment5\",\"2\":\"5\",\"3\":\"10\",\"4\":\"15\",\"5\":\"20\",\"6\":\"25\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nThe syntax for pivot_wider() is given below with description\n\npivot_longer(\"data\", \n  names_from = \"name of the column which contains your wide data columns\",\n  values_from = \"name of the column where your corresponding wide data column values are\")\n\nHere is a graphical representation\n\nSummary\nReferences\n\n\n",
      "last_modified": "2021-12-11T09:39:56+05:30"
    }
  ],
  "collections": ["posts/posts.json"]
}
