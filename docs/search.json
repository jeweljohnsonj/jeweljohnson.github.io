{
  "articles": [
    {
      "path": "blog_posts.html",
      "title": "Blog Posts",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:21:59+05:30"
    },
    {
      "path": "index.html",
      "title": "Hello World!",
      "author": [],
      "contents": "\r\nWelcome to One Carat Blog\r\n\r\n\r\n\r\nI have migrated this blog to here. For any\r\nlatest updates or posts please follow that link. Thanks for\r\nvisiting!\r\n\r\nVisitors\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:32:05+05:30"
    },
    {
      "path": "project1.html",
      "title": "Chapter 1: Data visualization using ggplot2",
      "description": "Learn how to plot different types of graphs using the ggplot2 package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-02-2021",
      "contents": "\r\n\r\nContents\r\nIntroduction to ggplot2 package\r\nSetting up the prerequisites\r\n1. Bar graph\r\n2. Histogram\r\n3. Line graph\r\n4. Scatter plot\r\n5. Density Plot\r\n6. Dot-plot\r\n7. Rug-plot\r\n8. Box plot\r\n9. Violin plot\r\n\r\nSaving your ggplot2 graphs\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\nIntroduction to ggplot2 package\r\nIn this chapter we will be plotting different types of graphs using a package called ggplot2 in R. The ggplot2 package is based on ‘grammar of graphics plot’ which provides a systematic way of doing data visualizations in R. With a few lines of code you can plot a simple graph and by adding more layers onto it you can create complex yet elegant data visualizations.\r\nA ggplot2 graph is made up of three components.\r\nData: Data of your choice that you want to visually summarise.\r\nGeometry or geoms: Geometry dictates the type of graph that you want to plot and this information is conveyed to ggplot2 through the geom() command code. For e.g. using the geom_boxplot() command, you can plot a box plot with your data. Likewise, there are many types of geometry that you can plot using the ggplot2 package.\r\nAesthetic mappings: Aesthetics define the different kinds of information that you want to include in the plot. One fo the most important aesthetic is in choosing which data values to plot on the x-axis and the y-axis. Another example is changing the colour of the data points, which can be used to differentiate two different categories in the data. The use of aesthetics depends on the geometry that you are using. We use the command aes() for adding different types of aesthetics to the plot. We will learn more about aes() in Chapter 2.\r\nThis tutorial is primarily focused on students who are beginners in R programming and wants to quickly plot their data without much of a hassle. So without further ado let’s plot some graphs!\r\nSetting up the prerequisites\r\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R.\r\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 package we use the following lines of command.\r\n\r\ninstall.packages(\"ggplot2\")\r\nlibrary(ggplot2)\r\n\r\nAll right we have the ggplot2 package loaded, now we just need some data to plot. Most R programming tutorials use the iris dataset as an example. But this tutorial won’t be like most tutorials. So let me introduce you to some lovely penguins from Palmer Station in Antarctica!\r\nFor this tutorial, we will be installing the palmerpenguins package which showcases body measurements taken from three different species of penguins from Antarctica. This package was made possible by the efforts of Dr. Allison Horst. The penguin data was collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER.\r\nInstall the palmerpenguins package and load it in R.\r\n\r\ninstall.packages(\"palmerpenguins\")\r\nlibrary(palmerpenguins)\r\n\r\nNow there are two datasets in this package. We will be using the penguins dataset which is a simplified version of the raw data present in the package.\r\nUse the command head() to display the first few values of penguins dataset to see how it looks like\r\n\r\nlibrary(palmerpenguins)\r\nhead(penguins)\r\n\r\n\r\n\r\n\r\n\r\nWe can see that are 8 columns in the dataset representing different values. Now let us try plotting some graphs with this data.\r\n1. Bar graph\r\nSo we will try to plot a simple bar graph first. Bar graphs are used to represent categorical data where the height of the rectangular bar represents the value for that category. We will plot a bargraph representing frequency data for all three species of penguins.\r\nWe will be using the geom_bar() command to plot the bar graph. Let us also use the command theme_bw() for a nice looking theme.\r\n\r\nggplot(data = penguins, aes(x = species, fill = species)) + \r\n  xlab(\"Species\") + ylab(\"Frequency\") + \r\n  ggtitle(\"Frequency of individuals for each species\") + \r\n  geom_bar() + theme_bw()\r\n\r\n\r\n2. Histogram\r\nHistograms are similar to bar graphs visually. But histograms are used to represent continuous data. Also the all the rectangular bars will have the same bin size or width.\r\nWe can plot a histogram using the command geom_histogram().\r\n\r\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \r\n  xlab(\"Body Mass (g)\") + ylab(\"Frequency\") + \r\n  ggtitle(\"Frequency of individuals for respective body mass\") + \r\n  geom_histogram(bins = 25) + theme_bw()\r\nWarning: Removed 2 rows containing non-finite values (stat_bin).\r\n\r\n\r\nThe warning message indicates that for two rows in the dataset, they have NA values or that they did not have any values present. This is true for real-life cases, as during data collection sometimes you will be unable to collect data due to various reasons. So this is perfectly fine.\r\n3. Line graph\r\nLine graph simply joins together data points to show overall distribution.\r\nUse the command geom_line() for plotting a line graph.\r\n\r\nggplot(data = penguins, aes(x = bill_length_mm, \r\n                            y = bill_depth_mm, colour = species)) + \r\n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \r\n  ggtitle(\"Bill length vs Bill depth\") + geom_line() + theme_bw()\r\n\r\n\r\n4. Scatter plot\r\nThe scatter plot simply denotes the data points in the dataset.\r\nUse the command geom_point() to plot a scatter plot.\r\n\r\nggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, \r\n                            shape = species, colour = species)) + \r\n  xlab(\"Body mass (g)\") + ylab(\"Flipper length (mm)\") + \r\n  ggtitle(\"Body mass vs Filpper length\") + geom_point(size = 2) + theme_bw()\r\n\r\n\r\n5. Density Plot\r\nDensity plots are similar to histograms but show it shows the overall distribution of the data in a finer way. This way we will get a bell-shaped curve if our data follows a normal distribution.\r\nUse the command geom_density() to a density plot.\r\n\r\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \r\n  xlab(\"Body Mass (g)\") + ylab(\"Density\") + ggtitle(\"Body mass distribution\") + \r\n  geom_density() + theme_bw()\r\n\r\n\r\nSince we plotted for all three species the graph looks clustered. Let us try plotting the same graph for only gentoo penguins. We will use the dplyr package to filter() data for gentoo penguins alone. The dplyr package comes in-built with R so just load the dplyr package using the command library().\r\n\r\nlibrary(dplyr)\r\n\r\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\r\n\r\nggplot(data = penguins_gentoo, aes(x = body_mass_g)) + \r\n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \r\n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \r\n  geom_density(fill = \"red\") + theme_bw()\r\n\r\n\r\n6. Dot-plot\r\nDot-plot is similar to a density plot but it shows discretely each data point in the distribution.\r\nUse the command geom_dotplot() to plot a dot-plot.\r\n\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \r\n  ggtitle(\"Body mass in three diferent species of penguins\") + \r\n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 100) + theme_bw()\r\n\r\n\r\n7. Rug-plot\r\nRug-plot is a simple way to visualize the distribution of data along the axis lines. It is often used in conjunction with other graphical representations.\r\nUse the command geom_rug() to plot a rug-plot.\r\n\r\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\r\n\r\nggplot(data = penguins_gentoo, aes(x = body_mass_g, y = flipper_length_mm)) + \r\n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \r\n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \r\n  geom_point(colour = \"darkred\") + geom_rug() + theme_bw()\r\n\r\n\r\n8. Box plot\r\nBox-plot is one of the better ways of showing data via quartiles. You can learn more about box plots here.\r\nUse the command geom_boxplot() to plot a box-plot.\r\n\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, colour = species)) + \r\n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \r\n  ggtitle(\"Body mass in three diferent species of penguins\") + geom_boxplot() + \r\n  theme_bw()\r\n\r\n\r\n9. Violin plot\r\nViolin plot can be considered as the best of both a box-plot and a density plot. It shows the quartile values, like in a box-plot and also shows the distribution of the data, like in a density plot.\r\nUse the command geom_violin() in conjunction with geom_boxplot() to plot a violin plot.\r\n\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \r\n  ggtitle(\"Body mass in three diferent species of penguins\") + \r\n  geom_violin(aes(colour = species), trim = TRUE) + geom_boxplot(width = 0.2) +\r\n  theme_bw()\r\n\r\n\r\nSaving your ggplot2 graphs\r\nUse the command ggsave() to save the graph locally. In the code below, ‘my_graph’ is the ggplot element containing your graph. The plot will be saved in your working directory.\r\n\r\nmy_graph <- ggplot(data = penguins, aes(x = species, y = body_mass_g,\r\n                                    fill = species)) + \r\n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \r\n  ggtitle(\"Body mass in three diferent species of penguins\") + \r\n  geom_violin(aes(colour = species), trim = TRUE) + \r\n  geom_boxplot(width = 0.2) +\r\n  theme_bw()\r\n\r\n#to save the plot\r\nggsave(my_graph, filename = \"your_graph_name.png\", width = 20, height = 20,\r\n       units = \"cm\")\r\n\r\nSummary\r\nI hope this tutorial helped you to get familiarised with the ggplot2 commands. There are many more different types of graphs that you can plot using ggplot2. The tutorial only showed some of the commonly used ones. The best way to learn R is through actually doing it yourself. Try to recreate the examples given in this tutorial by yourself and then try what you learned with the different datasets available in R. Have a good day!\r\n\r\nNext chapter: 2. Customizing graphs in ggplot2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:11:39 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:21:59+05:30"
    },
    {
      "path": "project2.html",
      "title": "Chapter 2: Customizing graphs in ggplot2",
      "description": "Learn how to customize the aesthetics, labels and axes of a graph in ggplot2.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-04-2021",
      "contents": "\r\n\r\nContents\r\n1. Setting up the prerequisites\r\n2. Building a plot\r\n1. Changing colour\r\n2. Changing point shape.\r\n3. Changing size\r\n4. Changing colour, shape and size manually\r\n5. Changing the opcaity of the elements\r\n6. Changing fill colour\r\n7. Changing line type\r\n8. Changing labels in the axes\r\n9. Tweaking the axes\r\n\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\nAfter Chapter 1 you must be familiar with the different types of graphs that you can plot using ggplot2. So for this tutorial, we will be learning how to customize those ggplot graphs to our liking. We will learn how to tweak the aesthetics, how to change labels and how to modify and change the axes in a graph.\r\nSo let us plot a graph from scratch and learn how to use different aesthetics available.\r\n1. Setting up the prerequisites\r\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R. For the dataset, we will first download the Stat2Data package which houses a lot of cool datasets. For this tutorial let us use the Hawks dataset which showcases body measurements from three different species of Hawks. This data was collected by students and faculty at Cornell College in Mount Vernon and the dataset was made available by late Prof. Bob Black at Cornell College.\r\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 and Stats2Data packages we use the following lines of command. Call the Hawks data using the data() command.\r\n\r\ninstall.packages(\"ggplot2\")\r\ninstall.packages(\"Stat2Data\")\r\nlibrary(ggplot2)\r\nlibrary(Stat2Data)\r\ndata(\"Hawks\")\r\n\r\nLet us look at how the dataset is structured. Use str() command\r\n\r\nstr(Hawks)\r\n\r\n\r\n\r\n\r\n\r\nSo there is a lot of information in the dataset which we can use for plotting. So let us try plotting them.\r\n2. Building a plot\r\nOne thing to remember here is that how ggplot2 builds a graph is by adding layers. Let us start by plotting the basic layer first where the x-axis shows ‘weight of the hawks’ and the y-axis shows ‘wingspan of the hawks’.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing))\r\n\r\n\r\nWait a sec! Where are my data points? So right now if we look at the syntax of the ggplot code we can see that we have not told ggplot2 which geometry we want. Do we want a scatter plot or a histogram or any other type of graph? So let us plot a scatter plot first. Use geom_point() command. By adding geom_point() to the ggplot() command is equivalent to adding an extra layer to the already existing layer that we got previously. Let us also use theme_bw() for a nice looking theme.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + geom_point() + \r\n  theme_bw()\r\nWarning: Removed 11 rows containing missing values (geom_point).\r\n\r\n\r\nWe got the graph! but we also got a warning message. The warning message tells us that the dataset which we had used to plot the graph had 11 rows of NA values and which could not be plotted into the graph. In real-life cases, we can have datasets with NA values due to various reasons, so this is fine.\r\nNow, this graph even though shows us data points we are not sure which point belongs to which species, as this dataset contains data for three species of Hawks. So let us try giving different colours to the points concerning the different species so that we are able to differentiate them.\r\n1. Changing colour\r\nTo change colour of the ‘element’ with respect to species, we have to add colour = Species within the aes() of the ggplot command. I use the general term ‘element’ here to emphasize that the same change in aesthetics will work for most of other types of geometries in ggplot2 (something which you have seen extensively in Chapter 1. Like for a line graph, the ‘element’ would be lines, here our ‘element’ is point.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw()\r\n\r\n\r\nThe species abbreviations are the following: CH=Cooper’s, RT=Red-tailed, SS=Sharp-Shinned.\r\nNow, this graph is way better than the previous one.\r\n2. Changing point shape.\r\nNow instead of the colour let us change the shape of the point. Use shape() command in aes()\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, shape = Species)) + #instead of colour use shape.\r\n  geom_point() + theme_bw() \r\n\r\n\r\nNow we did change the shape of points but it is still hard to make out the difference. Let us try specifying colour along with the shape\r\nAdding both colour and shape in aesthetics\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, \r\n  colour = Species, shape = Species)) + geom_point() + theme_bw()\r\n\r\n\r\nThis plot is much better than the previous one.\r\nNow let us try specifying colour within the aes() of the geom()\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \r\n  geom_point(aes(colour = Species)) + theme_bw()\r\n\r\n\r\nWe got the same graph as before! So what is the difference in specifying colour within aes() of ggplot() compared to the same but within geom(). Let us look at another example.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \r\n  geom_point() + theme_bw()\r\n\r\n\r\nI manually changed the colour of the points to red colour. Now let try specifying colour to the aes() within the geom()\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \r\n  geom_point(aes(colour = Species)) + theme_bw()\r\n\r\n\r\nYou can see that the red colour is overridden by other colours. So the aes() mapping (in this case colour) within geom() will override any aes() mapping within ggplot(). And whatever aes() mapping we give within ggplot() will be inherited by all geom() layers that will be added along with the ggplot() layer.\r\nLet us see another case.\r\n\r\n\r\nShow code\r\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \r\n  geom_point(colour = \"darkred\") + theme_bw()\r\n\r\n\r\n\r\n\r\nShow code\r\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \r\n  geom_point(aes(colour = \"darkred\")) + theme_bw()\r\n\r\n\r\nIf you compare both the codes, the only difference is that the colour = \"darkred\" command was outside aes() in the first code and inside aes() in the second code. So why didn’t the second graph have the same dark-red coloured points as the first one? The reason is that in the first code we are explicitly told to have all data points to be coloured dark-red but that is not the case with the second code. In the second code, since we have specified it inside aes(), ggplot is trying to look for a variable called “darkred” inside the dataset and colour it accordingly. This is why the legend that appears in the second graph has listed “darkred” as a category. And ggplot fails to find the variable called “darkred” but it still recognizes the colour command line and colour all the points in red. So the bottom line is that R has a pre-determined way of reading a code, so we users should well-understand what each line is expected to do and should not expect R to just fill it in accordingly to what we write.\r\nNow let us try a few other examples;\r\n3. Changing size\r\nUse size() in aes()\r\n\r\nggplot(data = Hawks, aes(x = Species, y = Hallux, size = Culmen)) + \r\n  geom_point() + theme_bw()\r\n\r\n\r\n4. Changing colour, shape and size manually\r\nUse scale_shape_manual() for changing shape, similarly scale_color_manual() for changing colour and scale_size_manual() for changing size of the element.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Hallux, colour = Species,\r\n                         shape = Species, size = Species)) + \r\n  geom_point() +\r\n  scale_shape_manual(values=c(1, 2, 3)) +\r\n  scale_color_manual(values=c('red','blue', 'green')) +\r\n  scale_size_manual(values=c(1,5,10)) + theme_bw()\r\n\r\n\r\n\r\n\r\n\r\n5. Changing the opcaity of the elements\r\nUse alpha() within the geom() with a numeric value to change the opacity of the elements. This is useful for visualising large datasets such as this.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point(alpha = 1/5) + theme_bw()\r\n\r\n\r\nThe same commands also work for most of the other types of geom(). Now let us see a few other aesthetics in other types of geoms.\r\n6. Changing fill colour\r\nUse fill() in aes()\r\n\r\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\r\n  geom_histogram(bins = 25) + theme_bw()\r\n\r\n\r\nUse scale_fill_manual() to manually change the colours.\r\n\r\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\r\n  geom_histogram(bins = 25) + theme_bw() + \r\n  scale_fill_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\"))\r\n\r\n\r\n7. Changing line type\r\nUse linetype in aes()\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \r\n  geom_line() + theme_bw()\r\n\r\n\r\nYou can manually change line types using scale_linetype_manual()\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \r\n  geom_line() + \r\n  scale_linetype_manual(values= c(\"twodash\", \"longdash\", \"dotdash\")) +\r\n  theme_bw()\r\n\r\n\r\n\r\n\r\n\r\nNow let us also see how to change the labels in a graph.\r\n8. Changing labels in the axes\r\nUse xlab() to change x-axis title, ylab() to change y-axis title, ggtitle() with label and subtitle to add title and subtitle respectively.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + xlab(\"Weight (gm)\") + ylab(\"Wing (mm)\") +\r\n  ggtitle(label = \"Weight vs Wing span in three different species of Hawks\", \r\n          subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\")\r\n\r\n\r\nThe same result can be obtained by using labs() to specify each label in the graph. For renaming the legend title, the command will depend on what is there within the aes() or in other words what is the legend based on.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + labs(x = \"Weight (gm)\", y = \"Wing (mm)\", \r\n  title= \"Weight vs Wing span in three different species of Hawks\", \r\n  subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\",\r\n  caption = \"Source: Hawk dataset from Stat2Data r-package\", #caption for the graph\r\n  colour = \"Hawk Species\", # rename legend title\r\n  tag = \"A\") #figure tag\r\n\r\n\r\n9. Tweaking the axes\r\nUse xlim() and ylim() for limiting x and y axes respectively.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + xlim(c(0,1000)) + ylim(c(200,350))\r\n\r\n\r\nUse coord_cartesian() to zoom in on a particular area in the graph\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + coord_cartesian(xlim = c(0,1000),\r\n                                                   ylim = c(200,350))\r\n\r\n\r\nUse coord_flip() to flip the x and y axes.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + coord_flip()\r\n\r\n\r\nUse scale_x_continuous() for tweaking the x-axis. The same command work for the y-axis also. You can include label() inside the command to manually label the breaks of the axes.\r\n\r\n\r\nShow code\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + scale_x_continuous(breaks = c(0,1000,2000))\r\n\r\n\r\n\r\n\r\nShow code\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + \r\n  scale_x_continuous(breaks = c(0,1000,2000),label = c(\"low\", \"medium\", \"high\"))\r\n\r\n\r\nUse scale_y_reverse() to display the y values in the descending order. Same command applies to x-axis also.\r\n\r\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\r\n  geom_point() + theme_bw() + scale_y_reverse()\r\n\r\n\r\nSummary\r\nIn this tutorial, we learned how to modify aesthetic present for different geoms in ggplot2. Then we learned how to modify labels in a graph and finally, we learned how to modify and change the axes elements. This tutorial is in no way exhaustive of the different ways you can modify a graph as there many more methods which are not discussed here. Instead of trying to include everything, this tutorial tries to be a stepping stone to help students of R to learn the basics of tweaking a graph. Try to practice what is covered here using other datasets available in the r-package Stat2Data. Have a good day my friend!\r\n\r\nNext chapter: 3. Even more customizations in ggplot2 Previous chapter: 1. Data visualization using ggplot2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\r\nAnn Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:11:54 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:21:59+05:30"
    },
    {
      "path": "project3.html",
      "title": "Chapter 3: Even more customizations in ggplot2",
      "description": "Learn how to customize the theme and colour palette of a graph in ggplot2.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-09-2021",
      "contents": "\r\n\r\nContents\r\nComplete themes\r\nThemes from ggthemes package\r\nChanging colour palettes in ggplot2\r\nviridis package\r\nwesanderson package\r\nggsci package\r\n\r\nCustomizing the theme()\r\n1. Customizing text elements using element_text()\r\n2. Customizing line elements using element_line()\r\n3. Customizing background elements using element_rect()\r\n\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nIn this chapter, we will learn how to change the theme settings of a graph in ggplot2. The theme of a graph consists of non-data components present in your graph. This includes the different labels of the graph, fonts used, colour of axes, the background of the graph etc. By changing the theme we would not be changing or transforming how the data will look in the graph. Instead, we would only change the visual appearances in the graph and by doing so we can make it more aesthetically pleasing. Furthermore, we will see a few popular packages featuring ready to use themes. We will also learn about colour palettes and will see different packages associated with them.\r\nComplete themes\r\nThe ggplot2 package features ready to use themes called ‘complete themes’. So before we begin customizing themes, let us plot a few graphs and see how these themes look like. For the plots, I have used the BirdNest dataset from the Stat2Data package in R. The BirdNest dataset contains nest and species characteristics of North American passerines. The data was collected by Amy R. Moore, as a student at Grinnell College in 1999.\r\nGetting the BirdNest dataset and viewing how the dataset is structured.\r\n\r\ninstall.packages(\"Stat2Data\") #for installing Stat2Data package\r\ninstall.packages(\"ggplot2\") #for installing ggplot2 package\r\n\r\n#load the packages\r\nlibrary(Stat2Data)\r\nlibrary(ggplot2)\r\n\r\ndata(\"BirdNest\") #loading the BirdNest dataset\r\nstr(BirdNest) #for viewing structure of the dataset\r\n\r\n\r\n\r\n\r\n\r\nSo we have plenty of variables to play with. The tabs shown below are named according to the theme used in the plots. The description for each theme is taken from ggplot2 tidyverse webpage.\r\n\r\n\r\ntheme_gray()\r\n\r\ntheme_gray(): The signature ggplot2 theme with a grey background and white gridlines, designed to put the data forward yet make comparisons easy.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_gray()\r\n\r\n\r\ntheme_bw()\r\n\r\ntheme_bw(): The classic dark-on-light ggplot2 theme. May work better for presentations displayed with a projector.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw()\r\n\r\n\r\ntheme_linedraw()\r\n\r\ntheme_linedraw(): A theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. Serves a purpose similar to theme_bw(). Note that this theme has some very thin lines (<< 1 pt) which some journals may refuse.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_linedraw()\r\n\r\n\r\ntheme_light()\r\n\r\ntheme_light(): A theme similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_light()\r\n\r\n\r\ntheme_dark()\r\n\r\ntheme_dark(): The dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin coloured lines pop out.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_dark()\r\n\r\n\r\ntheme_minimal()\r\n\r\ntheme_minimal(): A minimalistic theme with no background annotations.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_minimal()\r\n\r\n\r\ntheme_classic()\r\n\r\ntheme_classic(): A classic-looking theme, with x and y axis lines and no gridlines.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_classic()\r\n\r\n\r\ntheme_void()\r\n\r\ntheme_void(): A completely empty theme.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_void()\r\n\r\n\r\n\r\n\r\nThemes from ggthemes package\r\nIf you want even more pre-built themes then you can try the ggthemes package. This package was developed by Dr. Jeffrey B. Arnold.\r\n\r\n#install and load ggthemes package\r\ninstall.packages(\"ggthemes\")\r\nlibrary(ggthemes)\r\n\r\nThe tabs shown below are named after the themes present in ggthemes package. The description for each theme is taken from the ggthemes manual.\r\n\r\n\r\ntheme_base()\r\n\r\ntheme_base(): Theme similar to the default settings of the ‘base’ R graphics.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_base() + theme(text = element_text(size = 10)) #size is reduced to accommodate the graph in the tab\r\n\r\n\r\ntheme_calc()\r\n\r\ntheme_calc(): Theme similar to the default settings of LibreOffice Calc charts.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_calc()\r\n\r\n\r\ntheme_clean()\r\n\r\ntheme_clean(): Clean ggplot theme with no panel background, black axis lines and grey fill colour for chart elements.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_clean()\r\n\r\n\r\ntheme_economist()\r\n\r\ntheme_economist(): A theme that approximates the style of The Economist.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_economist()\r\n\r\n\r\ntheme_excel()\r\n\r\ntheme_excel(): Theme to replicate the ugly monstrosity that was the old gray-background Excel chart. Please never use this. This theme should be combined with the scale_colour_excel() color scale.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_excel()\r\n\r\n\r\ntheme_excel_new()\r\n\r\ntheme_excel_new(): Theme for ggplot2 that is similar to the default style of charts in current versions of Microsoft Excel.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_excel_new()\r\n\r\n\r\ntheme_few()\r\n\r\ntheme_few(): Theme based on the rules and examples from Stephen Few’s Show Me the Numbers and “Practical Rules for Using Color in Charts”.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_few()\r\n\r\n\r\ntheme_fivethirtyeight()\r\n\r\ntheme_fivethirtyeight(): Theme inspired by the plots on FiveThirtyEight plots\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_fivethirtyeight()\r\n\r\n\r\ntheme_foundation()\r\n\r\ntheme_foundation(): This theme is designed to be a foundation from which to build new themes, and not meant to be used directly. theme_foundation() is a complete theme with only minimal number of elements defined. It is easier to create new themes by extending this one rather than theme_gray() or theme_bw(), because those themes define elements deep in the hierarchy.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_foundation()\r\n\r\n\r\ntheme_gdocs()\r\n\r\ntheme_gdocs(): Theme similar to the default look of charts in Google Docs.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_gdocs() + theme(text = element_text(size = 10)) #size is reduced to accommodate the graph in the tab\r\n\r\n\r\ntheme_hc()\r\n\r\ntheme_hc(): Theme based on Highcharts plots\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_hc()\r\n\r\n\r\ntheme_igray()\r\n\r\ntheme_igray(): Theme with white panel and gray background.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_igray()\r\n\r\n\r\ntheme_map()\r\n\r\ntheme_map(): A clean theme that is good for displaying maps from geom_map().\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_map()\r\n\r\n\r\ntheme_pander()\r\n\r\ntheme_pander(): The pander ships with a default theme when the ’unify plots’ option is enabled via panderOptions, which is now also available outside of pander internals, like evals, eval.msgs or Pandoc.brew.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_pander()\r\n\r\n\r\ntheme_par()\r\n\r\ntheme_par(): Theme which uses the current ‘base’ graphics parameter values from par(). Not all par() parameters, are supported, and not all are relevant to ggplot2 themes.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_par() + theme(text = element_text(size = 9)) #size is reduced to accommodate the graph in the tab\r\n\r\n\r\ntheme_solarized()\r\n\r\ntheme_solarized(): See https://ethanschoonover.com/solarized/ for a description of the Solarized palette.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_solarized()\r\n\r\n\r\ntheme_solid()\r\n\r\ntheme_solid(): Theme with nothing other than a background color.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_solid()\r\n\r\n\r\ntheme_stata()\r\n\r\ntheme_stata(): Themes based on Stata graph schemes.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_stata()\r\n\r\n\r\ntheme_tufte()\r\n\r\ntheme_tufte(): Theme based on Chapter 6 ’Data-Ink Maximization and Graphical Design’ of Edward Tufte The Visual Display of Quantitative Information. No border, no axis lines, no grids. This theme works best in combination with geom_rug() or geom_rangeframe().\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_tufte()\r\n\r\n\r\ntheme_wsj()\r\n\r\ntheme_wsj(): Theme based on the plots in The Wall Street Journal\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_wsj() + theme(text = element_text(size = 6)) #size is reduced to accommodate the graph in the tab\r\n\r\n\r\n\r\n\r\nChanging colour palettes in ggplot2\r\nApart from ready to use themes, there are also ready to use colour palettes which we can use. A colour palette contains a set of pre-defined colours which will be applied to the different geometries present in a graph.\r\nChoosing a good colour palette is important as it helps us to represent data in a better way and at the same time, it also makes the graph easier to read for people with colour blindness. Let us see a few popular colour palette packages used in R.\r\nviridis package\r\nviridis package is a popularly used colour palette in R. It is aesthetically pleasing and well designed to improve readability for colour blind people. The virids package was developed by Bob Rudis, Noam Ross and Simon Garnier. There are eight different colour scales present in this package. The name of the tab denotes the colour scale present in this package.\r\n\r\n#load viridis colour package\r\nlibrary(viridis)\r\n\r\n\r\n\r\nviridis\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"viridis\")\r\n\r\n\r\nmagma\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"magma\")\r\n\r\n\r\nplasma\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"plasma\")\r\n\r\n\r\ninferno\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"inferno\")\r\n\r\n\r\ncividis\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"cividis\")\r\n\r\n\r\nmako\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"mako\")\r\n\r\n\r\nrocket\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"rocket\")\r\n\r\n\r\nturbo\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_viridis(discrete = TRUE, option = \"turbo\")\r\n\r\n\r\n\r\n\r\nwesanderson package\r\nIf you like your colours distinctive and narrative, just like how American film-maker Mr. Wes Anderson would like it, then try the wesanderson package. Relive the The Grand Budapest Hotel moments through your graphs. The wesandreson package was developed by Karthik Ram. There are a total of 19 colour palettes present in this package. We will see a subset of them. All colour scales in this package are available here. The name of the tab denotes the colour scale used. The data used in this plot is the penguin dataset present in the package palmerpenguins.\r\n\r\n#install and load wesanderson and palmerpenguins package\r\ninstall.packages(\"wesanderson\")\r\ninstall.packages(\"palmerpenguins\")\r\nlibrary(wesanderson)\r\nlibrary(palmerpenguins)\r\ndata(\"penguins\") #load the penguins dataset\r\n\r\n\r\n\r\nGrandBudapest1\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"GrandBudapest1\", n = 3))\r\n\r\n\r\nBottleRocket2\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"BottleRocket2\", n = 3))\r\n\r\n\r\nRushmore1\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"Rushmore1\", n = 3))\r\n\r\n\r\nRoyal1\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"Royal1\", n = 3))\r\n\r\n\r\nZissou1\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"Zissou1\", n = 3))\r\n\r\n\r\nDarjeeling2\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"Darjeeling2\", n = 3))\r\n\r\n\r\nIsleofDogs1\r\n\r\n\r\nShow code\r\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \r\n  labs(x= \"Species\", y= \"Body mass (g)\",\r\n       fill= \"Nest type\", title= \"Body mass in three diferent species of penguins\",\r\n       subtitle = \"Penguins observed on islands near Palmer Station, Antarctica\",\r\n       caption= \"DataSource: penguins dataset in palmerpenguins r-package\") + geom_boxplot() + \r\n  theme_bw() + scale_fill_manual(values = wes_palette(\"IsleofDogs1\", n = 3))\r\n\r\n\r\n\r\n\r\nggsci package\r\nIf you want high-quality colour palettes reflecting scientific journal styles then you can try the ggsci package. The ggsci package was developed by Dr. Nan Xiao and Dr. Miaozhu Li. All colour scales in this package are available in package webpage. The descriptions of the colour scales were also taken from the package webpage. The name of the tab denotes the colour scale used.\r\n\r\n#load ggsci package\r\nlibrary(ggsci)\r\n\r\n\r\n\r\nscale_fill_npg()\r\n\r\nThe NPG palette is inspired by the plots in the journals published by Nature Publishing Group.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_npg()\r\n\r\n\r\nscale_fill_aaas()\r\n\r\nThe AAAS palette is inspired by the plots in the journals published by American Association for the Advancement of Science.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_aaas()\r\n\r\n\r\nscale_fill_nejm()\r\n\r\nThe NEJM palette is inspired by the plots in The New England Journal of Medicine.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_nejm()\r\n\r\n\r\nscale_fill_lancet()\r\n\r\nThe Lancet palette is inspired by the plots in Lancet journals, such as Lancet Oncology.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_lancet()\r\n\r\n\r\nscale_fill_jama()\r\n\r\nThe JAMA palette is inspired by the plots in The Journal of the American Medical Association.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_jama()\r\n\r\n\r\nscale_fill_jco()\r\n\r\nThe JCO palette is inspired by the the plots in Journal of Clinical Oncology.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_jco()\r\n\r\n\r\nscale_fill_ucscgb()\r\n\r\nThe UCSCGB palette is from the colors used by UCSC Genome Browser for representing chromosomes. This palette has been intensively used in visualizations produced by Circos.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_ucscgb()\r\n\r\n\r\nscale_fill_d3()\r\n\r\nThe D3 palette is from the categorical colors used by D3.js (version 3.x and before). There are four palette types (category10, category20, category20b, category20c) available.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_d3(palette = \"category10\")\r\n\r\n\r\nscale_fill_locuszoom()\r\n\r\nThe LocusZoom palette is based on the colors used by LocusZoom.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_locuszoom()\r\n\r\n\r\nscale_fill_igv()\r\n\r\nThe IGV palette is from the colors used by Integrative Genomics Viewer for representing chromosomes. There are two palette types (default, alternating) available.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_igv()\r\n\r\n\r\nscale_fill_uchicago()\r\n\r\nThe UChicago palette is based on the colors used by the University of Chicago. There are three palette types (default, light, dark) available.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_uchicago()\r\n\r\n\r\nscale_fill_startrek()\r\n\r\nThis palette is inspired by the (uniform) colors in Star Trek.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_startrek()\r\n\r\n\r\nscale_fill_tron()\r\n\r\nThis palette is inspired by the colors used in Tron Legacy. It is suitable for displaying data when using a dark theme.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_tron()\r\n\r\n\r\nscale_fill_futurama()\r\n\r\nThis palette is inspired by the colors used in the TV show Futurama.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_futurama()\r\n\r\n\r\nscale_fill_rickandmorty()\r\n\r\nThis palette is inspired by the colors used in the TV show Rick and Morty.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_rickandmorty()\r\n\r\n\r\nscale_fill_simpsons()\r\n\r\nThis palette is inspired by the colors used in the TV show The Simpsons.\r\n\r\n\r\n\r\nShow code\r\nggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\") +\r\n  theme_bw() + scale_fill_simpsons()\r\n\r\n\r\n\r\n\r\nCustomizing the theme()\r\nA ggplot theme is made up of different elements and it’s functions. For e.g. plot.title() element allows you to modify the title of the graph using the element function element_text(). In this way, we can change the font size, font family, text colour etc. of the title of the plot. So let us begin customising our graph. We will be reusing the BirdNest dataset for the graphs.\r\n1. Customizing text elements using element_text()\r\nAll text elements can be customized using the element function element_text(). The syntax for element_text() is as follows\r\n\r\nelement_text(\r\n  family = NULL, #insert family font name, e.g. \"Times\"\r\n  face = NULL,  #font face (\"plain\", \"italic\", \"bold\", \"bold.italic\")\r\n  colour = NULL, #either from colours() or hex code inside \"\"\r\n  size = NULL, #text size (in pts)\r\n  hjust = NULL, #horizontal justification values 0 or 1\r\n  vjust = NULL, #vertical justification values 0 or 1\r\n  angle = NULL, #angle in degrees\r\n  lineheight = NULL, #distance between text and axis line\r\n  color = NULL, #same function as colour\r\n  margin = NULL,\r\n  debug = NULL,\r\n  inherit.blank = FALSE\r\n)\r\n\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(No.eggs, Totcare, colour = Nesttype)) + geom_point() +\r\n    labs(x= \"Number of eggs\", y= \"Total care time (days)\",\r\n       title= \"Relationship between number of eggs and total care time\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\",\r\n       colour = \"Nest type\")\r\np\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(No.eggs, Totcare, colour = Nesttype)) + geom_point() +\r\n    labs(x= \"Number of eggs\", y= \"Total care time (days)\",\r\n       title= \"Relationship between number of eggs and total care time\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\",\r\n       colour = \"Nest type\")\r\n\r\n#customizing text elements\r\np + theme(plot.title=element_text(size = 15,family = \"Comic Sans MS\",colour = \"darkred\",face = \"bold\"),\r\n          plot.subtitle=element_text(size = 10,family = \"Courier\",colour= \"blue\",face= \"italic\"),\r\n          plot.caption = element_text(size = 8,family = \"Times\",colour= \"green\",face=\"bold.italic\", hjust=0),\r\n          axis.text.x= element_text(size = 6,colour = \"magenta\", angle=20),\r\n          axis.text.y= element_text(size = 6,colour = \"darkblue\", angle=30),\r\n          axis.title.x = element_text(colour = \"orchid\"),\r\n          axis.title.y = element_text(colour = \"sienna\"),\r\n          legend.text = element_text(size = 8,colour = \"darkgreen\"),\r\n          legend.title = element_text(size = 10,colour = \"lightblue\",face = \"bold\"))\r\n\r\n\r\n\r\n\r\n2. Customizing line elements using element_line()\r\nLine elements include axes, grid lines, borders of the graph etc. All line elements can be customized using the element function element_line(). The syntax for element_line() is as follows\r\n\r\nelement_line(\r\n  colour = NULL, #either from colours() or hex code inside \"\"\r\n  size = NULL, #line size in mm units\r\n  linetype = NULL, # eg: dashed, dotted etc \r\n  lineend = NULL, #line end style (round, butt, square)\r\n  color = NULL, #same function as colour\r\n  arrow = NULL, #arrow specification\r\n  inherit.blank = FALSE\r\n)\r\n\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\r\np\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\r\n\r\n#customizing line elements\r\np + theme(panel.grid.major = element_line(colour = \"red\", size = 0.8, linetype = \"dashed\"),\r\n          panel.grid.minor = element_line(colour = \"blue\",linetype = \"twodash\"),\r\n          axis.line.x = element_line(colour = \"darkred\", arrow = arrow()),\r\n          axis.line.y = element_line(colour = \"darkblue\"),\r\n          axis.ticks = element_line(size = 5, colour = \"yellow\"),\r\n          axis.ticks.length.y=unit(0.5, \"cm\")) #ticks positioned 0.5cm away from y axis\r\n\r\n\r\n\r\n\r\n3. Customizing background elements using element_rect()\r\nBackground elements include plot, panel and legend backgrounds and their margins. All background elements can be customized using the element function element_rect(). The syntax for element_rect() is as follows\r\n\r\nelement_rect(\r\n  fill = NULL, #fills colour\r\n  colour = NULL, #colours the border\r\n  size = NULL, #changes border size in mm units\r\n  linetype = NULL, #changes border linetype\r\n  color = NULL,\r\n  inherit.blank = FALSE\r\n)\r\n\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\r\np\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\np <- ggplot(BirdNest, aes(Nesttype, Length, fill = Nesttype)) + geom_boxplot() + \r\n  labs(x= \"Type of nest\", y= \"Mean body length for the species (in cm)\",\r\n       fill= \"Nest type\", title= \"Relationship between body length and nest types\",\r\n       subtitle = \"Data shown for 84 different species of North American passerines\",\r\n       caption= \"DataSource: BridNest dataset in Stat2Data r-package\")\r\n\r\n#customizing line elements\r\np + theme(plot.background = element_rect(size = 5, colour = \"red\", fill = \"lightblue\"),\r\n          panel.background = element_rect(size = 3, colour = \"blue\", fill = \"lightyellow\", linetype = \"dotted\"),\r\n          legend.key = element_rect(fill = \"lightgreen\"),\r\n          legend.background = element_rect(fill = \"grey\"),\r\n          legend.key.size = unit(0.75, \"cm\"))\r\n\r\n\r\n\r\n\r\nSummary\r\nI hope you are now able to customize a theme of a graph with ease. In this chapter, we learned about different theme elements and how to customize them. We also saw different packages in R which featured ready to use themes. We learned about colour palettes and got introduced to the popular colour packages available R. With that being said, always make sure that your graphs are colour-blind friendly. Have a good day!\r\n\r\nNext chapter: 4. Publication ready plots using ggpubr Previous chapter: 2. Customizing graphs in ggplot2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\r\nAnn Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\r\nJeffrey B. Arnold (2021). ggthemes: Extra Themes, Scales and Geoms for ‘ggplot2’. R package version 4.2.4. https://CRAN.R-project.org/package=ggthemes\r\nSimon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2021). Rvision - Colorblind-Friendly Color Maps for R. R package version 0.6.2. You can read more here.\r\nKarthik Ram and Hadley Wickham (2018). wesanderson: A Wes Anderson Palette Generator. R package version 0.3.6. https://CRAN.R-project.org/package=wesanderson\r\nNan Xiao (2018). ggsci: Scientific Journal and Sci-Fi Themed Color Palettes for ‘ggplot2’. R package version 2.9. https://CRAN.R-project.org/package=ggsci\r\nLast updated on\r\n\r\n[1] \"2022-01-07 22:15:24 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    },
    {
      "path": "project4.html",
      "title": "Chapter 1: Data tidying using tidyr",
      "description": "Learn how to make your data tidy with the tidyr package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-11-2021",
      "contents": "\r\n\r\nContents\r\nIntroduction to tidyr package\r\nWhat is tidy data?\r\nReshaping dataset\r\npivot_longer()\r\npivot_wider()\r\n\r\nSplitting and uniting cells\r\nunite()\r\nseparate()\r\nseparate_rows()\r\n\r\nExpanding and completing dataset\r\nexpand()\r\ncomplete()\r\n\r\nHandling NAs or missing values\r\ndrop_na()\r\nfill()\r\nreplace_na()\r\n\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nIntroduction to tidyr package\r\nRaw data might not be always in a usable form for any form of analysis or visualization process. The tidyr package aims to help you in reshaping your data in a usable form. In short, it helps you to ‘tidy’ up your data using various tools. In this chapter, we will see how you can use the tidyr package to make your data tidy.\r\nWhat is tidy data?\r\nFirst, we need to understand what tidy data looks like. For that let us imagine a scenario where you are a doctor who is trying to find the best treatment for a disease. Now your colleagues have short-listed five different treatment methods and have reported their efficacy values when tested with five different patients. Now you are tasked with finding which of the five treatments is the best against the disease. You open your computer and you find the following data of the experiment.\r\n\r\n\r\n\r\n\r\nThis is how often data is stored because it is easy to write it this way. In the first column, you can see the different treatments from one to five. And in the second column, you have the efficacy values of the treatments for patient 1 and it goes on for the other patients. Now, this is a good example of how a dataset should not look like! Surprised? Let us see what makes this dataset ‘dirty’.\r\nYou can quickly notice that there is no mentioning of what these numerical values mean. Of course, we know that they are efficacy values for the different treatments. But for someone who only has this data as a reference, that person would not have a clue as to what these numbers mean. Also, note that each of the rows contains multiple observation values which is not a feature of tidy data. This kind of data format is called ‘wide data’ which we will talk more about later.\r\nWith that being said, tidy data will have;\r\nEach of its variables represented in its own column\r\nEach observation or a case in its own row.\r\nEach of the rows will contain only a single value.\r\nSo let us see how the ‘tidier’ version of this data would look like.\r\n\r\n\r\n\r\n\r\nYou can see each of the columns represent only one type of variable. In the first column, you have the types of treatments, followed by patient IDs and their efficacy values for each treatment. Also, note that each row represents only one observation. So this kind of data format is what we strive to achieve by using the tidyr package and they are called as ‘long data’. So let us begin!\r\nReshaping dataset\r\nThere are different sets of commands which you can utilize to reshape your data and make it tidy. Let us each of these commands in action. But first, make sure you have the tidyr package loaded.\r\n\r\n#load tidyr package\r\nlibrary(tidyr)\r\n\r\npivot_longer()\r\nThe pivot_longer() command converts a ‘wide data’ to a ‘long data’. It does so by converting row names to a new column under a new variable name with its corresponding values moved into another column with another variable name. So let us see how it goes. We will take the earlier mentioned example and will see how to make it tidy. Now you don’t have to be concerned with the codes I have used to make the dummy data. Just have your focus on the pivot_longer() syntax.\r\n\r\n#making a dummy data\r\n#using sample function to pick random numbers in a sequence\r\npatient1 <- c(seq(1,5,1))\r\npatient2 <- c(seq(6,10,1))\r\npatient3 <- c(seq(11,15,1))\r\npatient4 <- c(seq(16,20,1))\r\npatient5 <- c(seq(21,25,1))\r\n\r\n#cbind simple combines the columns of same size\r\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \r\n\r\ntrt <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\r\n\r\ntrt_data <- cbind(trt, treatment_data)\r\ntrt_data <- as.data.frame(trt_data) #making it a data frame\r\n\r\ntrt_data_tidy <- pivot_longer(trt_data,\r\n                              c(patient1,patient2,patient3,patient4,patient5), \r\n                              names_to = \"patient_ID\", values_to = \"efficacy\")\r\ntrt_data_tidy\r\n\r\n\r\n\r\n\r\n\r\nFurthermore, you don’t have to manually type in the column names as you can use colnames() to call the column names of the dataset. Another way of doing the same is by excluding the first column from the process. By doing so the command will automatically pivot all columns except the excluded ones, so in this way, we don’t need to manually specify the column names. The codes given below will give you the same result as before.\r\n\r\npatient1 <- c(seq(1,5,1))\r\npatient2 <- c(seq(6,10,1))\r\npatient3 <- c(seq(11,15,1))\r\npatient4 <- c(seq(16,20,1))\r\npatient5 <- c(seq(21,25,1))\r\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \r\ntreatment <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\r\ntrt_data <- cbind(treatment, treatment_data)\r\ntrt_data <- as.data.frame(trt_data)\r\n#using colnames, [-1] is included to exclude the name of first column from the process\r\ntrt_data_tidy1 <- pivot_longer(trt_data,\r\n                              colnames(trt_data)[-1], \r\n                              names_to = \"patient_ID\", values_to = \"efficacy\")\r\n\r\n#the same can be done by manually specifying which columns to exclude\r\n#this can be done by denoting the column name ('treatment' in this case) with '-' sign\r\ntrt_data_tidy2 <- pivot_longer(trt_data, names_to = \"patient_ID\",\r\n                               values_to = \"efficacy\", -treatment)\r\n#checking if both the tidy datasets are one and the same\r\npaged_table(as.data.frame(trt_data_tidy1 == trt_data_tidy2),\r\n            options = list(rows.print = 5))\r\n\r\n\r\n\r\nThe syntax for pivot_longer() is given below with description\r\n\r\npivot_longer(\"data\", c(\"colname1, colname2,.....\"), \r\n  names_to = \"name of the column where your row names are present\",\r\n  values_to = \"name of the column where your corresponding row values are present\")\r\n\r\nHere is a graphical representation\r\n\r\npivot_wider()\r\nThe pivot_wider() does the exact opposite of what pivot_longer() does, which is to convert long data into wide data. We will use the earlier example.\r\n\r\n#making a dummy data\r\n#using sample function to pick random numbers in a sequence\r\npatient1 <- c(seq(1,5,1))\r\npatient2 <- c(seq(6,10,1))\r\npatient3 <- c(seq(11,15,1))\r\npatient4 <- c(seq(16,20,1))\r\npatient5 <- c(seq(21,25,1))\r\n\r\n#cbind simple combines the columns of same size\r\ntreatment_data <- cbind(patient1,patient2,patient3,patient4,patient5) \r\n\r\ntrt <- c(\"treatment1\", \"treatment2\",\"treatment3\",\"treatment4\",\"treatment5\")\r\n\r\ntrt_data <- cbind(trt, treatment_data)\r\ntrt_data <- as.data.frame(trt_data) #making it a data frame\r\n\r\ntrt_data_tidy <- pivot_longer(trt_data,\r\n                              c(patient1,patient2,patient3,patient4,patient5), \r\n                              names_to = \"patient_ID\", values_to = \"efficacy\")\r\n\r\n#making the data wide\r\ntrt_data_wider <- pivot_wider(trt_data_tidy, names_from = \"patient_ID\",\r\n                              values_from = \"efficacy\")\r\n\r\n#paged_Table() for viewing the dataset as a table, \r\n#you can see that the dataset is same as before\r\npaged_table(as.data.frame(trt_data_wider))\r\n\r\n\r\n\r\nThe syntax for pivot_wider() is given below with description\r\n\r\npivot_longer(\"data\", \r\n  names_from = \"name of the column which contains your wide data columns\",\r\n  values_from = \"name of the column where your corresponding wide data column values are\")\r\n\r\nHere is a graphical representation\r\n\r\nSplitting and uniting cells\r\nThere can be an instance where you want to split or untie cells within your dataset. Let us look at some examples.\r\nunite()\r\nIn the data given below, let say we want to unite the century column and the year column together. This can be done using the unite() command. You can view the before and after instances in the tabs below\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\nevent <- c(letters[1:4])\r\ncentury <- c(rep(19:20, each = 2))\r\nyear <- c(seq(10,16,2))\r\n\r\ndata <- as.data.frame(cbind(event,century,year))\r\npaged_table(data)\r\n\r\n\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\n#dummy data\r\nevent <- c(letters[1:4])\r\ncentury <- c(rep(19:20, each = 2))\r\nyear <- c(seq(10,16,2))\r\ndata <- as.data.frame(cbind(event,century,year))\r\n\r\n#uniting columns century and year\r\ndata_new <- unite(data, century, year, col = \"event_year\", sep = \"\")\r\n#viewing data as a table\r\npaged_table(data_new)\r\n\r\n\r\n\r\n\r\n\r\n\r\nThe syntax of unite() is as follows.\r\n\r\nunite(\"dataset name\",\r\n      \"name of first column to unite, name of second column to unite,.......\",\r\n      col = \"name of the new column to which all the other column will unite together\",\r\n      sep = \"input any element as a separator between the joining column values\")\r\n#in this case we are not putting a sep value\r\n\r\nseparate()\r\nIn the data given below, let say we want to split the ‘area_perimeter’ column into two separate columns. This can be done using the separate() command. You can view the before and after instances in the tabs below. As always I will be making dummy data to work with.\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\n#dummy data\r\nshapes <- c(letters[1:4])\r\narea <- c(paste0(10:13, \"m^2\"))\r\nperimetre <- c(paste0(30:33, \"m\"))\r\nratio <-as.data.frame(cbind(shapes,area,perimetre))\r\ndata <- unite(ratio, area, perimetre, col = \"area_perimetre\", sep = \"_\")\r\n#viewing data as a table\r\npaged_table(data)\r\n\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\n#dummy data\r\nshapes <- c(letters[1:4])\r\narea <- c(paste0(10:13, \"m^2\"))\r\nperimetre <- c(paste0(30:33, \"m\"))\r\nratio <-as.data.frame(cbind(shapes,area,perimetre))\r\ndata <- unite(ratio, area, perimetre, col = \"area_perimetre\", sep = \"_\")\r\n\r\n#separating column values into two separate columns named area and perimeter respectively\r\ndata_new <- separate(data, area_perimetre, sep = \"_\",\r\n                     into = c(\"area\", \"perimetre\"))\r\n#viewing data as a table\r\npaged_table(data_new)\r\n\r\n\r\n\r\n\r\n\r\nThe syntax of separate() is as follows.\r\n\r\nseparate(\"data name\",\r\n         \"column to separate into\",\r\n         sep = \"the separator element\",\r\n         into = c(\"col1\", \"col2\", \"........\")) # column names for the separated values\r\n\r\nseparate_rows()\r\nSimilar to the above case, you can also separate column values into several rows.\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\n#dummy data\r\nshapes <- c(letters[1:4])\r\narea <- c(paste0(10:13, \"m^2\"))\r\nperimetre <- c(paste0(30:33, \"m\"))\r\nratio <-as.data.frame(cbind(shapes,area,perimetre))\r\ndata <- unite(ratio, area, perimetre, col = \"area_perimetre\", sep = \"_\")\r\n#viewing data as a table\r\npaged_table(data)\r\n\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\n#dummy data\r\nshapes <- c(letters[1:4])\r\narea <- c(paste0(10:13, \"m^2\"))\r\nperimetre <- c(paste0(30:33, \"m\"))\r\nratio <-as.data.frame(cbind(shapes,area,perimetre))\r\ndata <- unite(ratio, area, perimetre, col = \"area_perimetre\", sep = \"_\")\r\n\r\n#separating column values into two several rows\r\ndata_new <- separate_rows(data, area_perimetre, sep = \"_\")\r\n#viewing data as a table\r\npaged_table(data_new)\r\n\r\n\r\n\r\n\r\n\r\nThe syntax of separate_rows() is as follows.\r\n\r\nseparate_rows(\"data name\",\r\n         \"column to separate\",\r\n         sep = \"the separator element\")\r\n\r\nExpanding and completing dataset\r\nYou can expand your data to include all possible combinations of values of variables listed or complete the dataset with NA values for all possible combinations.\r\nexpand()\r\nUsing the expand() command we can expand our data with missing combinations for the variables we specify.\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\n#viewing data as a table\r\npaged_table(dress_data)\r\n\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\n#expanding dataset with brand and dress as variables\r\ndress_data_expand <- expand(dress_data, brand, dress)\r\n\r\n#viewing data as a table\r\npaged_table(dress_data_expand)\r\n\r\n\r\n\r\n\r\n\r\nThe syntax of expand() is as follows.\r\n\r\nexpand(\"data name\", \"column names which you want to expand separated by commas\")\r\n\r\ncomplete()\r\nThe complete() command functions similar to the expand() command, but it also fills in NA values for columns which we didn’t specify, The main reason to use this command would be to convert implicit NA values hidden in the dataset to explicit NA values which are expressed in the dataset. Given below is a comparison between the complete() and expand() commands.\r\n\r\n\r\nexpand()\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\n#expanding dataset with brand and dress as variables\r\ndress_data_expand <- expand(dress_data, brand, dress)\r\n\r\n#viewing data as a table\r\npaged_table(dress_data_expand)\r\n\r\n\r\n\r\ncomplete()\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\n#completing dataset with brand and dress as variables\r\n#the variable 'size' will be filled with NAs as we did not specify it\r\ndress_data_complete <- complete(dress_data,brand,dress)\r\n\r\n#viewing data as a table\r\npaged_table(dress_data_complete)\r\n\r\n\r\n\r\n\r\n\r\nThe syntax of complete() is as follows.\r\n\r\ncomplete(\"data name\", \"column names which you want to complete separated by commas\")\r\n\r\nHandling NAs or missing values\r\nMost data collection would often result in possible NA values. The tidyr package allows us to drop or convert NA values. We will resue the earlier example. Below tabs show before and removing NA values.\r\ndrop_na()\r\nUse drop_na() to remove NA value containing rows from the dataset.\r\n\r\n\r\nBefore\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\ndress_data_complete <- complete(dress_data,brand,dress)\r\n\r\n#viewing data as a table\r\npaged_table(dress_data_complete)\r\n\r\n\r\n\r\nAfter\r\n\r\n\r\nShow code\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\n\r\ndress_data_complete <- complete(dress_data,brand,dress)\r\n\r\n#dropping NA values\r\n\r\ndress_data_noNA <- drop_na(dress_data_complete)\r\n\r\n#viewing data as a table\r\npaged_table(dress_data_noNA)\r\n\r\n\r\n\r\n\r\n\r\nfill()\r\nUse fill() to replace NA values by taking values from nearby cells. By default the NA values as replaced by whatever value that is above the cell containing the NA value. This can be changed by specifying the .direction value within fill()\r\n\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\ndress_data_complete <- complete(dress_data,brand,dress)\r\n\r\n#direction 'downup' simultaneously fill both upwards and downwards NA containing cells\r\ndress_data_fill <- fill(dress_data_complete, size, .direction = \"downup\")\r\n\r\n##viewing data as a table\r\npaged_table(dress_data_fill)\r\n\r\n\r\n\r\nreplace_na()\r\nUse replace_na() command to replace NA values to whatever value specified.\r\n\r\n#dummy data\r\nbrand <- c(letters[1:4])\r\ndress <- c(\"shirt\", \"pant\", \"jeans\", \"trousers\")\r\nsize <- c(\"s\", \"m\", \"l\", \"xl\")\r\ndress_data <- as.data.frame(cbind(brand,dress,size))\r\ndress_data_complete <- complete(dress_data,brand,dress)\r\n\r\n#replace NA with 0\r\n#specify the column which have NA inside the list()\r\n#then equate the value which would replace NAs\r\ndress_data_zero <- replace_na(dress_data_complete, list(size = 0))\r\n\r\n##viewing data as a table\r\npaged_table(dress_data_zero)\r\n\r\n\r\n\r\nSummary\r\nSo in this chapter, we learned what is tidy data and how we can make our data into tidy data. Making our data tidy is very important as it helps us to analyse and visualise the data in a very efficient manner. We also learned how to reshape our data, how to split or unite cells, how to complete and expand data and how to handle NA values. Hope this chapter was fruitful for you!\r\n\r\nNext chapter: 2. Data manipulation using dplyr (part 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nHadley Wickham (2021). tidyr: Tidy Messy Data. R package version 1.1.4. https://CRAN.R-project.org/package=tidyr\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:12:48 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    },
    {
      "path": "project5.html",
      "title": "Chapter 2: Data manipulation using dplyr (part 1)",
      "description": "Learn how to manipulate your data with the dplyr package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-13-2021",
      "contents": "\r\n\r\nContents\r\nIntroduction to dplyr package\r\nThe pipe operator %>%\r\nGrouping the data\r\ngroup_by()\r\n\r\nSummarising the data\r\nsummarise()\r\n\r\nwhen to use group_by()\r\ncount()\r\n\r\nManipulating cases or observations\r\nfilter()\r\ndistinct()\r\nslice()\r\nslice_sample()\r\nslice_min() and slice_max()\r\nslice_head() and slice_tail()\r\narrange()\r\nadd_row()\r\n\r\nManipulating variables or columns\r\npull()\r\nselect()\r\nrelocate()\r\nrename()\r\nmutate()\r\ntransmute()\r\nacross()\r\nc_across()\r\n\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nIntroduction to dplyr package\r\nThe dplyr package is a grammar of data manipulation just like how ggplot2 is the grammar of data visualization. It helps us to apply a wide variety of functions such as;\r\nSummarising the dataset\r\nApplying selections and orderings as a function of a variable\r\nCreating new variables as a function of existing variables\r\nWe will see in-depth how to manipulate our data like a boss!\r\nThe pipe operator %>%\r\nPerhaps the most amazing thing in making codes short and efficient is the pipe operator which is originally from the magrittr package which is made available for the dplyr package. The pipe operator helps you skip the intermediate steps of saving an object before you can use them in command. It does so by ‘piping’ together results from the first object to the function ahead of the pipe operator. The command x %>% y %>% z can be read as ‘take the result of x and use it with function y and take that result and use it with function z’. This is the gist of what the pipe operator does. Allow me to demonstrate.\r\n\r\nlibrary(ggplot2)\r\n#dummy data\r\na <- c(sample(1:100, size = 50))\r\nb <- c(sample(1:100, size = 50))\r\ndata <- as.data.frame(cbind(a,b))\r\n\r\n#without %>%\r\ndata <- mutate(data, ab = a*b, twice_a = 2*a)\r\ndata_new <- filter(data, ab < 300, twice_a < 200)\r\nggplot(data_new, aes(ab, twice_a)) + geom_point()\r\n\r\n#with %>%\r\ndata %>% mutate(ab = a*b, twice_a = 2*a) %>% \r\n  filter(ab < 300, twice_a < 200) %>%\r\n  ggplot(aes(ab, twice_a)) + geom_point()\r\n\r\nAs you can see, with pipe operator %>%, we did not have to save any objects in the intermediate steps and also it improved the overall clarity of the code. I have used a few commands from the dplyr package in the example given above. So without further ado let us delve into the dplyr package. For this chapter, I will be using the penguin dataset from the popular palmerpenguin package as an example.\r\n\r\n#install palmerpenguins package\r\ninstall.packages(\"palmerpenguins\")\r\nlibrary(dplyr)\r\nlibrary(palmerpenguins)\r\n\r\nGrouping the data\r\ngroup_by()\r\nThe command group_by() allows us to group the data via existing variables. It allows for a ‘split-apply-combine’ way of getting output. First, it will split the data or group the data with the levels in the variable, then apply the function of our choice and then finally combine the results to give us a tabular output. On its own the command doesn’t do anything, we use it in conjunction with other commands to get results based on the grouping we specify. The command ungroup() is used to ungroup the data.\r\nSummarising the data\r\nsummarise()\r\nThe summarise() command allows you to get the summary statistics of a variable or a column in the dataset. The result is given as tabular data. Many types of summary statistics can be obtained using the summarise() function. Some of them are given below. To calculate average values it is necessary to drop NA values from the dataset. Use drop_na() command from the tidyr package. The comments denote what each summary statistic is.\r\n\r\nlibrary(tidyr)\r\nsummary_data <- penguins %>% drop_na() %>%\r\n  group_by(species) %>% # we are grouping/splitting the data according to species\r\n  summarise(avg_mass = mean(body_mass_g), #mean mass\r\n            median_mass = median(body_mass_g), #median mass\r\n            max_mass = max(body_mass_g), #max value of mass, can also use min()\r\n            standard_deviation_bill_length = sd(bill_length_mm), #standard deviation of bill_length\r\n            sum_mass = sum(flipper_length_mm), #sum\r\n            distinct_years = n_distinct(year), #distinct values in column year\r\n            no_of_non_NAs = sum(!is.na(year)), #gives no of non NAs, \r\n            length_rows = n(), #length of the rows\r\n            iqr_mass = IQR(body_mass_g), #inter quartile range of mass\r\n            median_absolute_deviation_mass = mad(body_mass_g), #median absolute deviation of mass\r\n            variance_mass = var(body_mass_g)) # variance\r\n#viewing summary as a table\r\npaged_table(summary_data)\r\n\r\n\r\n\r\nThe number of non NA values will be the same as that of n() result as we have used drop_na()command in the beginning.\r\nThe base function summary() in R also gives the whole summary statistics of a dataset\r\n\r\n\r\nsummary(penguins)\r\n      species          island    bill_length_mm  bill_depth_mm  \r\n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \r\n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \r\n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \r\n                                 Mean   :43.92   Mean   :17.15  \r\n                                 3rd Qu.:48.50   3rd Qu.:18.70  \r\n                                 Max.   :59.60   Max.   :21.50  \r\n                                 NA's   :2       NA's   :2      \r\n flipper_length_mm  body_mass_g       sex           year     \r\n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \r\n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \r\n Median :197.0     Median :4050   NA's  : 11   Median :2008  \r\n Mean   :200.9     Mean   :4202                Mean   :2008  \r\n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \r\n Max.   :231.0     Max.   :6300                Max.   :2009  \r\n NA's   :2         NA's   :2                                 \r\n\r\n\r\nwhen to use group_by()\r\nIt can be confusing to decide when to use the group_by() function. In short, you should use it whenever you want any function to act separately on different groups present in the dataset. Here is a graphical representation of how the summarise() function is used to calculate the mean values of a dataset. When used with group_by() it calculates mean values for the respective groups in the data, but when group_by() is not used, it will calculate the mean value of the entire dataset irrespective of the different groups present and outputs a single column.\r\n\r\n\r\n\r\ncount()\r\nThe count() command is used to count the number of rows of a variable. Has the same function as that of n()\r\n\r\ncount <- penguins %>% group_by(species) %>%\r\n  count(island)\r\n#viewing count as a table\r\npaged_table(count)\r\n\r\n\r\n\r\nManipulating cases or observations\r\nThe following functions affect rows to give a subset of rows in a new table as output.\r\nfilter()\r\nUse filter() to filter rows corresponding to a given logical criteria\r\n\r\npenguins %>% filter(body_mass_g < 3000)\r\n\r\n\r\n\r\n\r\n\r\ndistinct()\r\nUse distinct() to remove rows with duplicate or same values.\r\n\r\npenguins %>% group_by(species) %>% distinct(body_mass_g)\r\n\r\n\r\n\r\n\r\n\r\nslice()\r\nUse slice() to select rows by position.\r\n\r\npenguins %>% slice(1:5) #slice from first row to fifth row\r\n\r\n\r\n\r\n\r\n\r\nslice_sample()\r\nUse slice_sample() to randomly select rows from the dataset. Instead of (n = ) you can also provide the proportion value (between 0 and 1) using (prop = ). For e.g. for a dataset with 10 rows, giving (prop = 0.5) will randomly sample 5 rows. Other related functions include;\r\npreserve : Values include TRUE to preserve grouping in a grouped dataset and FALSE to not preserve grouping while sampling.\r\nweight_by : Gives priority to a particular variable during sampling. An example is given below.\r\nreplace : Values include TRUE if you want sampling with replacement which can result in duplicate values, FALSE if you want sampling without replacement.\r\n\r\n\r\n\r\nn = 4\r\n\r\n#samples 4 rows randomly\r\npenguins %>% slice_sample(n = 4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nweight_by\r\n\r\n#sampling will favour rows with higher values of 'body_mass_g'\r\npenguins %>% drop_na() %>% slice_sample(n = 4, weight_by = body_mass_g)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nslice_min() and slice_max()\r\nUse slice_min() to extract rows containing least values and use slice_max() to extract rows with greatest values. The function with_ties = FALSE is included to avoid tie values.\r\n\r\n\r\n\r\nslice_min()\r\n\r\n#first 4 rows containing least value in body mass\r\npenguins %>% slice_min(body_mass_g, n = 4, with_ties = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nslice_max()\r\n\r\n#first 4 rows containing least value in body mass\r\npenguins %>% slice_max(body_mass_g, n = 4, with_ties = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nslice_head() and slice_tail()\r\nUse slice_head() to extract first set of rows and use slice_tail() to extract last set of rows.\r\n\r\n\r\n\r\nslice_head()\r\n\r\n#samples first 4 rows\r\npenguins %>% slice_head(n = 4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nslice_tail()\r\n\r\n#samples last 4 rows\r\npenguins %>% slice_tail(n = 4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\narrange()\r\nUse arrange() to arrange rows in a particular order.\r\n\r\n#arranging rows in descending order of bill length\r\n#by default it arranges data by ascending order when no specifications are given\r\npenguins %>% arrange(desc(bill_length_mm))\r\n\r\n\r\n\r\n\r\n\r\nadd_row()\r\nUse add_row() to add rows to the dataset.\r\n\r\nName <- c(\"a\", \"b\")\r\nAge <- c(12,13)\r\ndata.frame(Name, Age) %>% add_row(Name = \"c\", Age = 15)\r\n\r\n\r\n\r\n\r\n\r\nManipulating variables or columns\r\nThe following functions affect columns to give a subset of columns in a new table as output.\r\npull()\r\nUse pull() to extract columns as a vector, by name or index. Only the first 10 results are shown for easy viewing.\r\n\r\npenguins %>% pull(body_mass_g)\r\n [1] 3750 3800 3250   NA 3450 3650 3625 4675 3475 4250\r\n [ reached getOption(\"max.print\") -- omitted 334 entries ]\r\n\r\nselect()\r\nUse select() to extract columns as tables, by name or index.\r\n\r\npenguins %>% select(species, body_mass_g)\r\n\r\n\r\n\r\n\r\n\r\nrelocate()\r\nUse relocate() to move columns to new position. Results are not shown as these are trivial results.\r\n\r\n#relocates 'species' column to last position\r\npenguins %>% relocate(species, .after = last_col())\r\n\r\n\r\n\r\n\r\n\r\n#relocates 'species' column before column 'year' and renames the column as 'penguins'\r\npenguins %>% relocate(penguins = species, .before = year)\r\n\r\n\r\n\r\n\r\n\r\n#you can also relocate columns based on their class\r\n#relocates all columns with 'character' class to last position\r\npenguins %>% relocate(where(is.character), .after = last_col())\r\n\r\n\r\n\r\n\r\nrename()\r\nUse rename() function to rename column names in the dataset.\r\n\r\n\r\n#renames the column sex to gender\r\npenguins %>% rename(gender = sex)\r\n# A tibble: 344 × 8\r\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\r\n   <fct>   <fct>              <dbl>         <dbl>             <int>\r\n 1 Adelie  Torgersen           39.1          18.7               181\r\n 2 Adelie  Torgersen           39.5          17.4               186\r\n 3 Adelie  Torgersen           40.3          18                 195\r\n 4 Adelie  Torgersen           NA            NA                  NA\r\n 5 Adelie  Torgersen           36.7          19.3               193\r\n 6 Adelie  Torgersen           39.3          20.6               190\r\n 7 Adelie  Torgersen           38.9          17.8               181\r\n 8 Adelie  Torgersen           39.2          19.6               195\r\n 9 Adelie  Torgersen           34.1          18.1               193\r\n10 Adelie  Torgersen           42            20.2               190\r\n# … with 334 more rows, and 3 more variables: body_mass_g <int>,\r\n#   gender <fct>, year <int>\r\n\r\n\r\nmutate()\r\nUse mutate() function to create new columns or variables.\r\n\r\npenguins %>% drop_na() %>% \r\n  group_by(species) %>%\r\n  mutate(mean_mass = mean(body_mass_g))\r\n\r\n\r\n\r\n\r\n\r\ntransmute()\r\nDoes the same function as mutate() but in the process will drop any other columns and give you a table with only the newly created columns.\r\n\r\npenguins %>% drop_na() %>% \r\n  group_by(species) %>%\r\n  transmute(mean_mass = mean(body_mass_g))\r\n\r\n\r\n\r\n\r\n\r\nacross()\r\nUse across() to summarise or mutate columns in the same way. First example shows across() used with summarise() function.\r\n\r\n#summarise across columns body mass, bill length and bill depth\r\n#and calculate the mean values\r\n#since we are calculating mean values,\r\n#NAs are dropped using 'drop_na() function from 'tidyr' package\r\n\r\npenguins %>% drop_na() %>%\r\n  group_by(species) %>%\r\n  summarise(across(c(body_mass_g, bill_length_mm, bill_depth_mm), mean))\r\n\r\n\r\n\r\n\r\n\r\nSecond example showing across() used with mutate() function. We can efficiently create new columns using mutate() and across() together. Suppose we want to multiply all numerical values in a dataset with 2 and create new columns of those values. This can be done using the code below.\r\n\r\n# define the function\r\ntwo_times <- function(x) {\r\n  2*x\r\n} \r\n\r\n# .name will rename the new columns with 'twice` prefix combined with existing col names\r\npenguins %>% group_by(species) %>%\r\n  mutate(across(where(is.numeric), two_times, .names = \"two_times_{col}\"))\r\n\r\n\r\n\r\n\r\n\r\nThe same code when used just with mutate() function will look like this\r\n\r\n# define the function\r\ntwo_times <- function(x) {\r\n  2*x\r\n}\r\n\r\n#using only 'mutate()' function\r\npenguins %>% group_by(species) %>%\r\n  mutate(twice_bill_lenght = two_times(bill_length_mm),\r\n         twice_body_mass = two_times(body_mass_g),\r\n         .....)\r\n\r\nSo in this code, I will have to manually type all the col names and apply the operation individually which is too much of a hassle. Now we can better appreciate how efficient it is in using mutate() and across() functions together.\r\nc_across()\r\nThe function c_across() is similar to the earlier mentioned across() function. But instead of doing a column-wise function, it applies function across columns in a row-wise manner. Now, most functions in R by default computes across columns, so to specify row-wise computation, we have to explicitly use the function rowwise() in conjunction with other functions. In the example below we will sum both bill and flipper lengths of the penguins in the penguins dataset and create a new column called ‘sum_of_lengths’\r\n\r\npenguins %>% drop_na() %>%\r\n  group_by(species) %>%\r\n  rowwise() %>%\r\n  transmute(sum_of_length = sum(c_across(c(bill_length_mm,flipper_length_mm))))\r\n\r\n\r\n\r\n\r\n\r\nSummary\r\nThe dplyr package is the grammar of the data manipulation in R. It features well-made functions to help us summarise the data, group data by variables and manipulate columns and rows in the dataset. In this chapter, we learned in detail the different functions that help us manipulate data efficiently and have seen case examples also. In the next chapter, we will see the remaining set of functions in the dplyr package. See you!\r\n\r\nNext chapter: 3. Data manipulation using dplyr (part 2) Previous chapter: 1. Data tidying using tidyr\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nHadley Wickham, Romain François, Lionel Henry and Kirill Müller (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr Here is the link to the cheat sheet explaining each function in dplyr.\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\r\nHadley Wickham (2021). tidyr: Tidy Messy Data. R package version 1.1.4. https://CRAN.R-project.org/package=tidyr\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:12:50 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    },
    {
      "path": "project6.html",
      "title": "Chapter 3: Data manipulation using dplyr (part 2)",
      "description": "Learn how to manipulate your data with the dplyr package. In the continuation with the previous chapter.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-13-2021",
      "contents": "\r\n\r\nContents\r\nContinuation from the previous chapter\r\nrownames_to_column() & column_to_rownames()\r\n\r\nCombine tables/columns\r\nbind_cols()\r\nbind_rows()\r\n\r\nMutating joins and filtering joins\r\nAdditional commands for joins\r\nSet operations\r\nintersect()\r\nsetdiff()\r\nunion()\r\nsetequal()\r\n\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nContinuation from the previous chapter\r\nIn the previous chapter we have seen quite a lot of functions from the dplyr package. In this chapter, we will see the rest of the functions where we learn how to handle row names, how to join columns and rows and different set operations in the dplyr package.\r\n\r\n#loading neessary packages\r\nlibrary(dplyr)\r\n\r\nrownames_to_column() & column_to_rownames()\r\nTidy data does not use row names. So use rownames_to_column() command to convert row names to a new column to the data. The function column_to_rownames() does the exact opposite of rownames_to_column() as it converts a column into rownames but make sure that the column you are converting into rownames does not contain NA values.\r\n\r\n# mtcars dataset contains rownames\r\n# creates new column called car_names which contains row names\r\nmtcars %>% rownames_to_column(var = \"car_names\")\r\n\r\n# returns the original mtcars dataset\r\nmtcars %>% rownames_to_column(var = \"car_names\") %>%\r\n  column_to_rownames(var = \"car_names\")\r\n\r\nCombine tables/columns\r\nbind_cols()\r\nJoins columns with other columns. Similar function as that of cbind() from base R.\r\n\r\ndf1 <- tidytable::data.table(x = letters[1:5], y = c(1:5))\r\ndf2 <- tidytable::data.table(x = letters[3:7], y = c(6:10))\r\nbind_cols(df1,df2)\r\n\r\n#similar functionality\r\ncbind(df1,df2)\r\n\r\nbind_rows()\r\nJoins rows with other rows. Similar function as that of rbind() from base R.\r\n\r\ndf1 <- tidytable::data.table(x = letters[1:5], y = c(1:5))\r\ndf2 <- tidytable::data.table(x = letters[3:7], y = c(6:10))\r\nbind_rows(df1,df2)\r\n\r\n#similar functionality\r\nrbind(df1,df2)\r\n\r\nThe functions that are described below have the same functionality as that of bind_cols() but give you control over how the columns are joined.\r\nMutating joins and filtering joins\r\nMutating joins include left_join(), right_join(), inner_join() and full_join() and filtering joins include semi_join() and anti_join().\r\n\r\n\r\nleft_join()\r\nIn the code below, matching variables of df2 are joined with df1. In the final data, you can see that only kevin and sam from df2 are matched with df1, and only those row values are joined with df1. For those variables which didn’t get a match, the row values for those are filled with NA. You can interpret the variables with NA values as; both john and chris are not present in df2.\r\nIf you are familiar with set theory in mathematics, what we are doing essentially is similar to \\((df1 \\cap df2) \\cup df1\\).\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% left_join(df2)\r\n\r\n\r\n\r\n\r\n\r\nright_join()\r\nSimilar to left_join() but here, you will be joining matching values from df1 to df2, the opposite of what we did earlier. As you can see only kevin and sam from the df1 is matched with df2, and only those row values are joined with df2. For the variables which didn’t get a match, the row values for those are filled with NA. You can interpret the variables with NA values as; bob is not present in df1.\r\nThis function, in the manner used here, is similar to \\((df1 \\cap df2) \\cup df2\\).\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% right_join(df2)\r\n\r\n\r\n\r\n\r\n\r\ninner_join()\r\nThe function inner_join() compares both df1 and df2 variables and only joins rows with the same variables. Here only kevin and sam are common in both the dataframes so the row values of only those columns are joined and others are omitted.\r\nThis function is similar to \\(df1 \\cap df2\\).\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% inner_join(df2)\r\n\r\n\r\n\r\n\r\n\r\nfull_join()\r\nThe function full_join() compares both df1 and df2 variables and joins all possible matches while retaining both mistakes in df1 and df2 with NA values.\r\nThis function is similar to \\(df1 \\cup df2\\).\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% full_join(df2)\r\n\r\n\r\n\r\n\r\n\r\nanti_join()\r\nThis is an example of filtering join. The function anti_join() compares df1 variables to and df2 variables and only outputs those variables of df1 which didn’t get a match with df2.\r\nThis function, in the manner used here, is similar to \\(df1 \\cap df2^c\\).\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% anti_join(df2)\r\n\r\n\r\n\r\n\r\n\r\nsemi_join()\r\nThis is an example of filtering join. The function semi_join() is similar to inner_join() but it only gives variables of df1 which has a match with df2.\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\ndf1 %>% semi_join(df2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHere is a nice graphical representation of the functions we just described now. Image source.\r\n\r\n\r\n\r\nFigure 1: Source: RPubs.com\r\n\r\n\r\n\r\n\r\n\r\n\r\nFigure 2: Source: RPubs.com\r\n\r\n\r\n\r\nAdditional commands for joins\r\nAdditionally, you can specify which common columns to match.\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\n# match with column 'x'\r\ndf1 %>% left_join(df2, by = \"x\")\r\n\r\ndf3 <- tidytable::data.table(a = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"), y = 1:5)\r\ndf4 <- tidytable::data.table(b = c(\"kevin\",\"sam\", \"bob\"), z = 10:12)\r\n\r\n# matching with column having different names, a and b in this case\r\ndf3 %>% left_join(df4, by = c(\"a\" = \"b\"))\r\n\r\nSet operations\r\nSimilar to the mutating join functions that we had seen, there are different functions related to set theory operations.\r\nintersect()\r\nOutputs common rows in the dataset.\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"))\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"))\r\n\r\nintersect(df1, df2)\r\n       x\r\n1: kevin\r\n2:   sam\r\n\r\nsetdiff()\r\nOutputs rows in first data frame but not in second data frame.\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"))\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"))\r\n\r\nsetdiff(df1, df2)\r\n       x\r\n1:  john\r\n2: chris\r\n\r\nunion()\r\nOutputs all the rows in both dataframes\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"))\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"))\r\n\r\nunion(df1, df2)\r\n       x\r\n1:  john\r\n2: kevin\r\n3: chris\r\n4:   sam\r\n5:   bob\r\n\r\nsetequal()\r\nChecks whether two datasets have same number of rows.\r\n\r\ndf1 <- tidytable::data.table(x = c(\"john\",\"kevin\",\"chris\",\"sam\",\"sam\"))\r\ndf2 <- tidytable::data.table(x = c(\"kevin\",\"sam\", \"bob\"))\r\n\r\nsetequal(df1, df2)\r\n[1] FALSE\r\n\r\nSummary\r\nIn this chapter, we have seen how to handle row names, how to combine columns and rows, what are mutating and filtering joins and various set operations. Thus to conclude this chapter, we have now learned almost all functions in the dplyr package and have seen how to manipulate data efficiently. With the knowledge of the pipe operator that we have seen in chapter 1, we are now equipped to write codes compactly and more clearly. I hope this chapter was useful for you and I will see you next time. Have a good day!\r\n\r\nPrevious chapter: 2: Data manipulation using dplyr (part 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nReferences\r\nHadley Wickham, Romain François, Lionel Henry and Kirill Müller (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr Here is the link to the cheat sheet explaining each function in dplyr.\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:12:52 IST\"\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    },
    {
      "path": "project7.html",
      "title": "Chapter 4: Publication ready plots using ggpubr",
      "description": "Learn how to make publication ready plots using the ggpubr package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "01-06-2022",
      "contents": "\r\n\r\nContents\r\nIntroduction to ggpubr package\r\nPlots in ggpubr package\r\n1. Balloon plot\r\n2. Bar plot\r\n3. Box plot\r\n4. Violin plot\r\n5. Density plot\r\n6. Donut chart\r\n7. Pie chart\r\n8. Dot chart\r\n9. Dot plot\r\n10. Histogram plot\r\n11. Line plot\r\n12. Plotting paired data\r\n13. Quantile-Quantile plot\r\n14. Scatter plot\r\n15. Scatter Plot with Marginal Histograms\r\n\r\nOther functions in ggpubr package\r\n1. Statistical tests\r\n2. Descriptive statistics by groups\r\n3. Showing p-values and statistical results within plots\r\n4. Faceting plots into grids\r\n5. Adding paragraph\r\n6. Having plots adjacent to each other\r\n\r\nSaving your plot\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nIntroduction to ggpubr package\r\nIf you are a researcher who wants to have publication-ready plots but does not want to get hassled by the ggplot2 package, then let me introduce you to theggpubr package. Using this package you can make publication grade plots without spending too much time modifying things. Even if you are a beginner in R programming and does not know how to use theggplot2 package, you will still be able to plot graphs using the ggpubr package because of how easy the syntax is. But having prior knowledge of the ggplot2 package will surely make things easier, and an experienced person will know that any plot which can be plotted using ggpubr can also be plotted using ggplot2. So let us start.\r\nFirst things first, install the ggpubr package and load it in the library.\r\n\r\ninstall.packages(\"ggpubr\")\r\nlibrary(ggpubr)\r\n\r\nWe will first see what all plots can be plotted.\r\nPlots in ggpubr package\r\n1. Balloon plot\r\nThe balloon plot is similar to bar plots as it is used to represent a large categorical dataset. The size and colour of the dot can be attributed to different values in the dataset.\r\n\r\n# library(viridis) for colour palette\r\nggballoonplot(mtcars, fill = \"value\") + \r\n  scale_fill_viridis(option = \"turbo\")\r\n\r\n\r\n2. Bar plot\r\nA simple bar graph which is used for representing categorical data. By using the add function inside the main plot function, you can easily display summary statistics like mean, median etc. and various types of errors like standard error, standard deviation and various others. You can view the whole list of features here.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nggbarplot(penguins,\r\n          x = \"species\",\r\n          y = \"bill_length_mm\",\r\n          add = c(\"mean_sd\"),\r\n          fill = \"species\",\r\n          label = TRUE,\r\n          lab.nb.digits = 2,\r\n          lab.vjust = -2.2,\r\n          lab.col = \"red\",\r\n          title = \"Mean bill length of penguins\",\r\n          subtitle = \"Error bars shows standard deviation\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill length (mm)\",\r\n          ylim = c(0,60),\r\n          palette = \"npg\")\r\n\r\n\r\n3. Box plot\r\nStandard box plot graph. Like in the previous graph you can specify colour palettes from the scientific journal palettes featured in the ggsci R package.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nggboxplot(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          color = \"species\",\r\n          palette = \"futurama\",\r\n          add = \"jitter\",\r\n          shape = \"species\")\r\n\r\n\r\n4. Violin plot\r\nA simple violin plot.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nggviolin(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          fill = \"species\",\r\n          palette = \"npg\",\r\n          add = \"boxplot\",\r\n          shape = \"species\")\r\n\r\n\r\n5. Density plot\r\nStandard density plot.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nggdensity(penguins,\r\n          x = \"body_mass_g\",\r\n          color = \"species\",\r\n          rug = TRUE,\r\n          fill = \"species\",\r\n          add = \"mean\",\r\n          title = \"Mean body mass of penguins\",\r\n          xlab = \"Body mass (g)\",\r\n          palette = \"lancet\")\r\n\r\n\r\n6. Donut chart\r\nSimilar to a pie diagram. Also please note that you don’t have to explicitly mention x and y parameters in the command. You can simply just type the column names, the first column name will be shown on the x-axis and the second on the y axis.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\n# library(dplyr)\r\n# library(tidyr)\r\npenguins_freq <- penguins %>% drop_na() %>%\r\n  group_by(species) %>%\r\n  summarise(frequency = length(species))\r\n\r\nlabs <- paste0(penguins_freq$species, \" (\", round((penguins_freq$frequency/sum(penguins_freq$frequency))*100, digits = 0), \"%)\")\r\n\r\nggdonutchart(penguins_freq,\r\n             \"frequency\",\r\n             label = labs,\r\n             fill = \"species\",\r\n             palette = \"ucscgb\",\r\n             lab.pos = \"in\",\r\n             title = \"Frequency of penguins\")\r\n\r\n\r\n7. Pie chart\r\nSimple pie chart.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\n# library(dplyr)\r\n# library(tidyr)\r\npenguins_freq <- penguins %>% drop_na() %>%\r\n  group_by(species) %>%\r\n  summarise(frequency = length(species))\r\n\r\nlabs <- paste0(penguins_freq$species, \" (\", round((penguins_freq$frequency/sum(penguins_freq$frequency))*100, digits = 0), \"%)\")\r\n\r\nggpie(penguins_freq,\r\n             \"frequency\",\r\n             label = labs,\r\n             fill = \"species\",\r\n             palette = \"futurama\",\r\n             lab.pos = \"in\",\r\n             title = \"Frequency of penguins\")\r\n\r\n\r\n8. Dot chart\r\nThis is an upgrade from bar charts where the data is displayed with minimum clutter in the form of dots. This allows the readers to not get bothered about things like the slope of a line in case of line plots, or width of bars in case of bar charts or any other confusing aesthetics of a plot. You can read more about this graph here. It is also called “Cleveland dot plots” named after the founder of this plot.\r\n\r\nmtcars %>% rownames_to_column(var = \"car_names\") %>% \r\n  mutate(cyl = as.factor(cyl)) %>%\r\n  ggdotchart(\"car_names\",\r\n             \"mpg\",\r\n             color = \"cyl\",\r\n             palette = \"aaas\",\r\n             sorting = \"ascending\",\r\n             rotate = TRUE,\r\n             y.text.col = TRUE,\r\n             dot.size = 2,\r\n             ylab = \"Miles per gallon of fuel\",\r\n             title = \"Mileage of different cars\",\r\n             ggtheme = theme_pubr()) + theme_cleveland() \r\n\r\n\r\n9. Dot plot\r\nSimple dot plot. Similar to a box plot. You can also overlay a box plot or a violin plot over the dot plot using the add function inside the main function.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\n\r\nggdotplot(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          subtitle = \"Error bars shows standard deviation\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          fill = \"species\",\r\n          add = \"mean_sd\",\r\n          palette = \"locuszoom\")\r\n\r\n\r\n10. Histogram plot\r\nThe same function as that of a density plot but the data is represented in bars.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\ngghistogram(penguins,\r\n            x = \"body_mass_g\",\r\n            add = \"mean\",\r\n            fill = \"species\",\r\n            rug = TRUE,\r\n            title = \"Body mass of penguins\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Frequency\",\r\n            palette = \"startrek\")\r\n\r\n\r\n11. Line plot\r\nA simple line plot.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nggline(penguins,\r\n      x = \"body_mass_g\",\r\n      y = \"bill_depth_mm\",\r\n      linetype = \"species\",\r\n      shape = \"species\",\r\n      color = \"species\",\r\n      title = \"Body mass vs Bill depth\",\r\n      xlab = \"Body mass (g)\",\r\n      ylab = \"Bill depth (mm)\",\r\n      palette = \"startrek\")\r\n\r\n\r\n12. Plotting paired data\r\nThis is essentially a box plot but for paired data. Widely used to represent treatment groups showing before and after results of the same sample. We will be using the Anorexia dataset from the PairedData package in R. It features weights of girls before and after treatment for Anorexia.\r\n\r\n# install.packages(\"PairedData\")\r\n# library(PairedData)\r\ndata(\"Anorexia\")\r\nAnorexia %>% \r\n  ggpaired(cond1 = \"Prior\",\r\n           cond2 = \"Post\",\r\n           title = \"Weights of girls before and after treatment for anorexia\",\r\n           xlab = \"Condition\",\r\n           ylab = \"Weight (lbs)\",\r\n           fill = \"condition\",\r\n           line.color = \"darkgreen\",\r\n           line.size = 0.2,\r\n           palette = \"simpsons\")\r\n\r\n\r\n13. Quantile-Quantile plot\r\nQuantile-Quantile plot or QQ plot is useful in assessing the distribution of a data. A data having normal distribution will be shown as a straight line of the formula ‘y=x’ in the QQ plot. Points outside the confidence interval are outliers in the data.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>% ggqqplot(\"body_mass_g\",\r\n                      color = \"species\",\r\n                      palette = \"aaas\",\r\n                      title = \"Quantile-Quantile plot\")\r\n\r\n\r\n14. Scatter plot\r\nA simple scatter plot.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>% filter(species == \"Chinstrap\") %>%\r\n  ggscatter(\"body_mass_g\",\r\n            \"bill_length_mm\",\r\n            add = \"reg.line\",\r\n            add.params = list(color = \"darkred\", fill = \"yellow\"),\r\n            cor.coef = TRUE,\r\n            cor.method = \"pearson\",\r\n            conf.int = TRUE,\r\n            title = \"Body mass distribution of Chinstrap penguins\",\r\n            subtitle = \"Correlation method used was Pearson\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill lenght (mm)\")\r\n\r\n\r\nYou can also use scatter plot for data having different categories. Using ellipse=TRUE you can group data to its category.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>%\r\n  ggscatter(\"body_mass_g\",\r\n            \"bill_length_mm\",\r\n            color = \"species\",\r\n            alpha = 0.5,\r\n            palette = \"d3\",\r\n            ellipse = TRUE, #adds an ellipse to group data of different category\r\n            title = \"Body mass vs Bill length\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill length (mm)\")\r\n\r\n\r\nYou can also label points in the scatter plot using the label function.\r\n\r\nmtcars %>% rownames_to_column(var = \"car_names\") %>% \r\n  mutate(cyl = as.factor(cyl)) %>%\r\n  ggscatter(\"wt\",\r\n             \"mpg\",\r\n             color = \"cyl\",\r\n             palette = \"nejm\",\r\n             xlab = \"Weight (1000 lbs)\",\r\n             ylab = \"Miles per gallon of fuel\",\r\n             title = \"Mileage vs Weight of different cars\",\r\n             label = \"car_names\",\r\n             repel = TRUE,\r\n             ggtheme = theme_pubr()) + theme_cleveland() \r\n\r\n\r\n15. Scatter Plot with Marginal Histograms\r\nThis is plot is a combination of scatter plot and histograms.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>%\r\n  ggscatterhist(\"body_mass_g\",\r\n            \"bill_length_mm\",\r\n            color = \"species\",\r\n            alpha = 0.5, size = 2,\r\n            palette = \"futurama\",\r\n            margin.params = list(fill = \"species\", color = \"black\", size = 0.2),\r\n            title = \"Body mass distribution of penguins\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill length (mm)\")\r\n\r\n\r\nYou can also choose to show box plots.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>%\r\n  ggscatterhist(\"body_mass_g\",\r\n            \"bill_depth_mm\",\r\n            color = \"species\",\r\n            alpha = 0.5, size = 2,\r\n            palette = \"futurama\",\r\n            margin.plot = \"boxplot\",\r\n            title = \"Body mass vs Bill depth\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill depth (mm)\",\r\n            ggtheme = theme_bw())\r\n\r\n\r\nOther functions in ggpubr package\r\n1. Statistical tests\r\nYou can do various statistical tests using the functions in the ggpubr package. We will be using the Anorexia dataset in the PairedData package in R. In the code given below, we are doing a Wilcoxon test to compare the mean weights of girls before treatment to the mean weights of girls post-treatment. Since the data is paired we will indicate it by the paired = TRUE function. A word of caution! Before starting to do statistical tests please ensure whether you can fulfil conditions for using parametric tests or not using or data. You can check whether your data is normally distributed using a QQ plot or by using any normality tests.\r\n\r\n# install.packages(\"PairedData\")\r\n# library(PairedData)\r\n# library(dplyr)\r\n# library(tidyr)\r\n\r\ndata(\"Anorexia\")\r\n\r\n# tidying the data\r\nAnorexia_new <- Anorexia %>% \r\n  pivot_longer(c(Prior, Post), names_to = \"condition\", values_to = \"weight\")\r\ncompare_means(weight ~ condition, Anorexia_new, paired = TRUE)\r\n\r\n\r\n\r\n\r\n\r\nYou can also do parametric tests like ANOVA and its non-parametric version; the Kruskal-Wallis test, which can be followed by multiple pairwise comparisons.\r\n\r\ncompare_means(body_mass_g ~ species, penguins, method = \"anova\")\r\ncompare_means(body_mass_g ~ species, penguins, method = \"kruskal.test\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# multiple pairwise comparisons\r\n# when there is more than two levels, the function automatically does pairwise comparisons\r\ncompare_means(body_mass_g ~ species, penguins)\r\n\r\n\r\n\r\n\r\n\r\n2. Descriptive statistics by groups\r\nUsing the function desc_statby() we can get the summary statistics of a dataset in the form of a data frame. Similar to the summary() function in base R.\r\n\r\ndesc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\r\n\r\n\r\n\r\n\r\n\r\nYou can also show the data as a table using the ggtexttable() function.\r\n\r\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\r\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\r\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\r\nsummary_tbl\r\n\r\n\r\n3. Showing p-values and statistical results within plots\r\nUsing various functions you can show statistical outputs within the plots.\r\nUsing Wilcoxon test for paired data.\r\n\r\n# install.packages(\"PairedData\")\r\n# library(PairedData)\r\ndata(\"Anorexia\")\r\nAnorexia %>% \r\n  ggpaired(cond1 = \"Prior\",\r\n           cond2 = \"Post\",\r\n           title = \"Weights of girls before and after treatment for anorexia\",\r\n           xlab = \"Condition\",\r\n           ylab = \"Weight (lbs)\",\r\n           fill = \"condition\",\r\n           line.color = \"darkgreen\",\r\n           line.size = 0.2,\r\n           palette = \"simpsons\") + stat_compare_means(paired = TRUE)\r\n\r\n\r\nUsing t-test\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>% filter(species == \"Adelie\" & island == c(\"Biscoe\",\"Torgersen\")) %>%\r\nggboxplot(x = \"island\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Island\",\r\n          ylab = \"Bill depth (mm)\",\r\n          color = \"island\",\r\n          palette = \"futurama\",\r\n          add = \"jitter\",\r\n          shape = \"island\") + stat_compare_means(method = \"t.test\")\r\n\r\n\r\nUsing ANOVA test and t-test as post hoc test. For pairwise comparison, we have to manually list out the pairwise comparisons that we want.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\n\r\n# listing out pairwise comparisons \r\ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\r\n\r\nggboxplot(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          color = \"species\",\r\n          palette = \"futurama\",\r\n          add = \"jitter\",\r\n          shape = \"species\") + \r\n  stat_compare_means(method = \"anova\", label.y = 25) + #anova test\r\n  stat_compare_means(comparisons = compare, method = \"t.test\") # post hoc test using t-test\r\n\r\n\r\nUsing Kruskal-Wallis test and Wilcoxon test as post hoc test.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\r\nggboxplot(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          color = \"species\",\r\n          palette = \"futurama\",\r\n          add = \"jitter\",\r\n          shape = \"species\") + \r\n  stat_compare_means(label.y = 25) + #anova test\r\n  stat_compare_means(comparisons = compare) # post hoc test using t-test\r\n\r\n\r\nYou can also choose to show only asterisks as significance levels\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\ncompare <- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap\", \"Gentoo\"))\r\nggboxplot(penguins ,\r\n          x = \"species\",\r\n          y = \"bill_depth_mm\",\r\n          title = \"Mean bill depth of penguins\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill depth (mm)\",\r\n          color = \"species\",\r\n          palette = \"futurama\",\r\n          add = \"jitter\",\r\n          shape = \"species\") + \r\n  stat_compare_means(label.y = 25) +\r\n  stat_compare_means(comparisons = compare, label = \"p.signif\")\r\n\r\n\r\nFor illustrative purposes, I have used box plots for showing p-values and statistical test results, but you can do the same with most of the other types of graphs shown in this chapter.\r\n4. Faceting plots into grids\r\nYou can also facet different plots into grids using the function facet.by.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>% drop_na() %>%\r\n  ggscatter(\"body_mass_g\",\r\n            \"bill_length_mm\",\r\n            color = \"species\",\r\n            alpha = 0.5,\r\n            palette = \"d3\",\r\n            facet.by = c(\"island\", \"sex\"), # faceting graphs via island and sex categories\r\n            title = \"Body mass vs Bill length\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill length (mm)\")\r\n\r\n\r\n5. Adding paragraph\r\nYou can also add a paragraph beneath the plot of your interest using the ggparagraph() and ggarrange() functions.\r\n\r\n# install.packages(\"PairedData\")\r\n# library(PairedData)\r\ndata(\"Anorexia\")\r\n\r\ntext <- paste(\"The above dataset shows the weight (in lbs) of 17 girls before\",\r\n              \"and after they got treatment for anorexia.\", sep = \" \")\r\n\r\ntext_plot <- ggparagraph(text, face = \"bold\", size = 12)\r\n\r\nplot <- Anorexia %>% \r\n  ggpaired(cond1 = \"Prior\",\r\n           cond2 = \"Post\",\r\n           title = \"Weights of girls before and after treatment for anorexia\",\r\n           xlab = \"Condition\",\r\n           ylab = \"Weight (lbs)\",\r\n           fill = \"condition\",\r\n           line.color = \"darkgreen\",\r\n           line.size = 0.2,\r\n           palette = \"simpsons\")\r\n\r\nggarrange(plot, text_plot,\r\n         ncol = 1, nrow = 2,\r\n         heights = c(1, 0.3))\r\n\r\n\r\n6. Having plots adjacent to each other\r\nYou can use the ggarrange() function to place different plots together.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nbar_plot <- ggbarplot(penguins,\r\n          x = \"species\",\r\n          y = \"bill_length_mm\",\r\n          add = c(\"mean_sd\"),\r\n          fill = \"species\",\r\n          label = TRUE,\r\n          lab.nb.digits = 2,\r\n          lab.vjust = -2.2,\r\n          lab.col = \"red\",\r\n          title = \"Mean bill length of penguins\",\r\n          subtitle = \"Error bars shows standard deviation\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill length (mm)\",\r\n          ylim = c(0,60),\r\n          palette = \"npg\")\r\n\r\nhistogram <- gghistogram(penguins,\r\n            x = \"body_mass_g\",\r\n            add = \"mean\",\r\n            fill = \"species\",\r\n            rug = TRUE,\r\n            title = \"Body mass of penguins\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Frequency\",\r\n            palette = \"startrek\")\r\n\r\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\r\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\r\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\r\n\r\n# arranging plots together\r\nggarrange(bar_plot, histogram,\r\n         ncol = 2, nrow = 2, labels = c(\"A\", \"B\"),\r\n         heights = c(1, 0.3))\r\n\r\n\r\nIf you are arranging three graphs it is better to use the grid.arrange() function from the gridExtra package in R.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\nbar_plot <- ggbarplot(penguins,\r\n          x = \"species\",\r\n          y = \"bill_length_mm\",\r\n          add = c(\"mean_sd\"),\r\n          fill = \"species\",\r\n          label = TRUE,\r\n          lab.nb.digits = 2,\r\n          lab.vjust = -2.2,\r\n          lab.col = \"red\",\r\n          title = \"Mean bill length of penguins\",\r\n          subtitle = \"Error bars shows standard deviation\",\r\n          xlab = \"Species of penguins\",\r\n          ylab = \"Bill length (mm)\",\r\n          ylim = c(0,60),\r\n          palette = \"npg\")\r\n\r\nhistogram <- gghistogram(penguins,\r\n            x = \"body_mass_g\",\r\n            add = \"mean\",\r\n            fill = \"species\",\r\n            rug = TRUE,\r\n            title = \"Body mass of penguins\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Frequency\",\r\n            palette = \"startrek\")\r\n\r\nsummary <- desc_statby(penguins, measure.var = \"body_mass_g\", grps = \"species\")\r\nsummary_short <- summary %>% dplyr::select(species, mean, median, se, sd)\r\nsummary_tbl <- ggtexttable(summary_short, rows = NULL, theme = ttheme(\"mRed\")) # use ?ttheme to see more themes\r\n\r\n# arranging three plots together\r\nlayout_matrix <- matrix(c(1, 1, 2, 2, 4, 3, 3, 4), nrow = 2, byrow = TRUE)\r\nlibrary(gridExtra)\r\ngrid.arrange(bar_plot, histogram, summary_tbl, layout_matrix = layout_matrix)\r\n\r\n\r\nSaving your plot\r\nUsing the function ggexport() you can save your plot. Tweak width and height accordingly and also change the resolution to fit your needs.\r\n\r\n# install.packages(\"palmerpenguins\")\r\n# library(palmerpenguins)\r\npenguins %>%\r\n  ggscatterhist(\"body_mass_g\",\r\n            \"bill_length_mm\",\r\n            color = \"species\",\r\n            alpha = 0.5, size = 2,\r\n            palette = \"futurama\",\r\n            margin.params = list(fill = \"species\", color = \"black\", size = 0.2),\r\n            title = \"Body mass distribution of penguins\",\r\n            xlab = \"Body mass (g)\",\r\n            ylab = \"Bill length (mm)\") %>%\r\n  ggexport(filename = \"my_plot.png\", width = 800, height = 600, res = 150)\r\n\r\nSummary\r\nIn this chapter we learned how to plot publication standard graphs using the ggpubr package in R. Even with little to no experience in using the ggplot2 package in R, one can plot graphs with ease using the ggpubr package. To quickly recap, from this chapter we saw;\r\nHow to plot around 15 different types of graphs\r\nHow to facet plots\r\nHow to do basic statistical tests and visualize them within graphs\r\nHow to add paragraph text under the graphs\r\nHow to group different graphs into one single file\r\nI hope this chapter was useful to you. See you next time!\r\n\r\nPrevious chapter: 3: Even more customizations in ggplot2\r\nReferences\r\nAlboukadel Kassambara (2020). ggpubr: ‘ggplot2’ Based Publication Ready Plots. R package version 0.4.0. https://CRAN.R-project.org/package=ggpubr\r\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/\r\nStephane Champely (2018). PairedData: Paired Data Analysis. R package version 1.1.1. https://CRAN.R-project.org/package=PairedData\r\nWilliam S. Cleveland & Robert McGill (1984) Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods, Journal of the American Statistical Association, 79:387, 531-554, DOI: 10.1080/01621459.1984.10478080\r\nHadley Wickham, Romain François, Lionel Henry and Kirill Müller (2021). dplyr: A Grammar of Data Manipulation. R package version 1.0.7. https://CRAN.R-project.org/package=dplyr\r\nHadley Wickham (2021). tidyr: Tidy Messy Data. R package version 1.1.4. https://CRAN.R-project.org/package=tidyr\r\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\r\nSimon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2021). Rvision - Colorblind-Friendly Color Maps for R. R package version 0.6.2.\r\nLast updated on\r\n\r\n[1] \"2022-01-06 20:10:46 IST\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    },
    {
      "path": "template.html",
      "title": " ",
      "description": "Learn how to \n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "12-23-2021",
      "contents": "\r\n\r\nContents\r\nHeading 1\r\nSummary\r\nReferences\r\nLast updated on\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nHeading 1\r\nSummary\r\n\r\nPrevious chapter: 2: Data manipulation using dplyr (part 1)\r\nReferences\r\nLast updated on\r\n\r\n[1] \"2022-01-06 17:13:16 IST\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-07-02T10:22:00+05:30"
    }
  ],
  "collections": ["posts/posts.json"]
}
