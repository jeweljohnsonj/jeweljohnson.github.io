{
  "articles": [
    {
      "path": "about.html",
      "title": "Jewel Johnson",
      "author": [],
      "contents": "\n\n          \n          \n          One-carat Blog\n          \n          \n          Home\n          Blog\n          \n          \n          R Tutorials\n           \n          ▾\n          \n          \n          Mastering geometry in ggplot2\n          Tweaking graphs in ggplot2\n          \n          \n          About\n          CV\n          \n          \n          \n          ☰\n          \n          \n      \n        \n          \n            \n              \n            \n              Jewel Johnson\n            \n            \n              \n                \n                    \n                      \n                        Twitter\n                      \n                    \n                  \n                                    \n                    \n                      \n                        GitHub\n                      \n                    \n                  \n                                    \n                    \n                      \n                        Email\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            \n            Bio\n            I did my Masters in Biological Sciences from Indian Institute of Science Education and Research Thiruvananthapuram (IISER-TVM). For my master thesis I studied the limits and adaptations of nocturnal vision in the Giant Honeybee (Apis dorsata) in Prof. Hema Somanathan’s lab. I have also worked with Asian Honeybee (Apis cerana) and the Greater Banded Hornet (Vespa tropica). Currently I am applying for a PhD.\n            \n            \n            Research Interests\n            I’m interested in behavioural ecology and visual ecology, particularly in insects. With climate change being one of the greatest problem before us I am also interested in studying the effect of climate change on animals and plants, and how do they adapt to these effects. Since most of my work were in social insects I am also interested in studying social behaviour.\n            \n            \n            Hobbies\n            R enthusiast and data visualization | Listening to instrumental music, mainly math-rock | Stamp and coin collection | Photography (check out some of my photos here) | Cycling and Trekking\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Jewel Johnson\n            \n            \n              \n                \n                                    \n                    \n                      Twitter\n                    \n                  \n                                    \n                    \n                      GitHub\n                    \n                  \n                                    \n                    \n                      Email\n                    \n                  \n                                  \n              \n            \n            \n              \n              Bio\n              I did my Masters in Biological Sciences from Indian Institute of Science Education and Research Thiruvananthapuram (IISER-TVM). For my master thesis I studied the limits and adaptations of nocturnal vision in the Giant Honeybee (Apis dorsata) in Prof. Hema Somanathan’s lab. I have also worked with Asian Honeybee (Apis cerana) and the Greater Banded Hornet (Vespa tropica). Currently I am applying for a PhD.\n              \n              \n              Research Interests\n              I’m interested in behavioural ecology and visual ecology, particularly in insects. With climate change being one of the greatest problem before us I am also interested in studying the effect of climate change on animals and plants, and how do they adapt to these effects. Since most of my work were in social insects I am also interested in studying social behaviour.\n              \n              \n              Hobbies\n              R enthusiast and data visualization | Listening to instrumental music, mainly math-rock | Stamp and coin collection | Photography (check out some of my photos here) | Cycling and Trekking\n              \n            \n        \n      \n    \n\n    \n    \n    \n      © Copyright 2021 Jewel Johnson\n      This webiste was created using the distill R-package.\n      \n      \n\n  \n  ",
      "last_modified": "2021-12-08T08:42:40+05:30"
    },
    {
      "path": "blog_posts.html",
      "title": "Blog Posts",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-12-08T08:42:41+05:30"
    },
    {
      "path": "index.html",
      "title": "Hello World!",
      "author": [],
      "contents": "\n\n\n\nAnimation by Dr. Rich Pauloo\n\nWelcome to my blog! My name is Jewel Johnson. In this blog you will find cool science literature and R language articles. So give this blog a try and let me know how it is! Thanks for visiting. Have a good day!\n\n\n",
      "last_modified": "2021-12-08T08:42:41+05:30"
    },
    {
      "path": "project1.html",
      "title": "Mastering geomtery in ggplot2",
      "description": "Plot you first graph with this tutorial using the ggplot2 R-package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSetting up the prerequisites\n1. Bar graph\n2. Histogram\n3. Line graph\n4. Scatter plot\n5. Density Plot\n6. Dot-plot\n7. Rug-plot\n8. Box plot\n9. Violin plot\nSaving you ggplot2 graphs\nSummary\nReferences\n\nIn this tutorial we will be plotting different types of graphs using the package ggplot2 in R. The ggplot2 is an excellent package that can be used to create beautiful data visualizations. It has been created and developed by Dr. Hadley Wickham. At the very heart of a ggplot graph, we have a dataset which we want to plot, a coordinate system that acts as the environment for the plot and ‘geoms’- which can be tweaked to get different aesthetics for the graph.\nThis tutorial is primarily focused on students who are beginners in R programming and wants to quickly plot their data without much of a hassle. So without further ado let us get started!\nSetting up the prerequisites\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R.\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 package we use the following lines of command.\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nAll right we have the ggplot2 package loaded, now we just need some data to plot. Most R programming tutorials use the iris dataset for showing examples. This tutorial won’t be like most tutorials. So let me introduce you to the lovely penguins from Palmer Station in Antarctica!\nFor this tutorial, we will be installing the palmerpenguins package which showcases body measurements taken from three different species of penguins from Antarctica. This package was made possible by the efforts of Dr. Allison Horst. The penguin data was collected by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER.\nInstall the palmerpenguins package and load it in R.\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\nNow there are two datasets in this package. We will be using the penguins dataset which is a simplified version of the raw data present in the package.\nUse the command head() to display the first few values of penguins dataset to see how it looks like\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n\n\n\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nWe can see that are 8 columns in the dataset representing different values. Now let us try plotting some graphs with this data.\n1. Bar graph\nSo we will try to plot a simple bar graph first. Bar graphs are used to represent categorical data where the height of the rectangular bar represents the value for that category. From the bar graph we will be plotting, we will see the frequency data for all three species of penguins.\nWe will be using the geom_bar() command to plot the bar graph. Let us also use the command theme_bw() for the nice aesthetics.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, fill = species)) + \n  xlab(\"Species\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for each species\") + \n  geom_bar() + theme_bw()\n\n\n2. Histogram\nHistograms are similar to bar graphs visually. But histograms are used to represent continuous data. Also the all the rectangular bars will have the same bin size or width.\nWe can plot a histogram using the command geom_histogram().\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for respective body mass\") + \n  geom_histogram(bins = 25) + theme_bw()\nWarning: Removed 2 rows containing non-finite values (stat_bin).\n\n\nThe warning message indicates that for two rows in the dataset, they have NA values or that they did not have any values present. This is true for real-life cases, as during data collection sometimes you will be unable to collect data due to various reasons. So this is perfectly fine.\n3. Line graph\nLine graph simply joins together data points to show overall distribution.\nUse the command geom_line() for plotting a line graph.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = bill_length_mm, \n                            y = bill_depth_mm, colour = species)) + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  ggtitle(\"Bill length vs Bill depth\") + geom_line() + theme_bw()\n\n\n4. Scatter plot\nThe scatter plot simply denotes the data points in the dataset.\nUse the command geom_point() to plot a scatter plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                            shape = species, colour = species)) + \n  xlab(\"Body mass (g)\") + ylab(\"Flipper length (mm)\") + \n  ggtitle(\"Body mass vs Filpper length\") + geom_point(size = 2) + theme_bw()\n\n\n5. Density Plot\nDensity plots are similar to histograms but show it shows the overall distribution of the data in a finer way. This way we will get a bell-shaped curve if our data follows a normal distribution.\nUse the command geom_density() to a density plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Density\") + ggtitle(\"Body mass distribution\") + \n  geom_density() + theme_bw()\n\n\nSince we plotted for all three species the graph looks clustered. Let us try plotting the same graph for only gentoo penguins. We will use the dplyr package to filter() data for gentoo penguins alone. The dplyr package comes in-built with R so just load the dplyr package using the command library(). The dplyr package was also developed by Dr. Hadley Wickham.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_density(fill = \"red\") + theme_bw()\n\n\n6. Dot-plot\nDot-plot is similar to a density plot but it shows discretely each data point in the distribution.\nUse the command geom_dotplot() to plot a dot-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 100) + theme_bw()\n\n\n7. Rug-plot\nRug-plot is a simple way to visualize the distribution of data along the axis lines. It is often used in conjunction with other graphical representations.\nUse the command geom_rug() to plot a rug-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g, y = flipper_length_mm)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_point(colour = \"darkred\") + geom_rug() + theme_bw()\n\n\n8. Box plot\nBox-plot is one of the better ways of showing data via quartiles. You can learn more about box plots here.\nUse the command geom_boxplot() to plot a box-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, colour = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + geom_boxplot() + \n  theme_bw()\n\n\n9. Violin plot\nViolin plot can be considered as the best of both a box-plot and a density plot. It shows the quartile values, like in a box-plot and also shows the distribution of the data, like in a density plot.\nUse the command geom_violin() in conjunction with geom_boxplot() to plot a violin plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + geom_boxplot(width = 0.2) +\n  theme_bw()\n\n\nSaving you ggplot2 graphs\nUse the command ggsave() to save the graph locally. In the code below, ‘my_graph’ is the ggplot element containing your graph. The plot will be saved in your working directory.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nmy_graph <- ggplot(data = penguins, aes(x = species, y = body_mass_g,\n                                    fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + \n  geom_boxplot(width = 0.2) +\n  theme_bw()\n\nggsave(my_graph, filename = \"your_graph_name.png\", width = 20, height = 20,\n       units = \"cm\")\n\nSummary\nI hope this tutorial helped you to get familiarised with ggplot2 commands. There are many more different types of graphs that you can plot using ggplot2. The tutorial only showed some of the commonly used ones. The best way to learn R is through actually doing it yourself. Try to recreate the examples given in this tutorial by yourself and then try what you learned with the different datasets available in R. Have a good day!\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n",
      "last_modified": "2021-12-08T08:42:48+05:30"
    },
    {
      "path": "project2.html",
      "title": "Tweaking the graphs in ggplot2",
      "description": "Learn how to tweak aesthetics, labels and axes of a graph.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\n1. Setting up the prerequisites\n2. Building a plot\n1. Changing colour\n2. Changing point shape.\n3. Changing size\n4. Changing colour, shape and size manually\n5. Changing the opcaity of the elements\n6. Changing fill colour\n7. Changing line type\n8. Changing labels in the axes\n9. Tweaking the axes\n\nSummary\nReferences\n\nIn this tutorial, we will be learning how to customize our ggplot graphs. We will learn how to tweak the aesthetics, how to change labels and how to modify and change the axes in a graph.\nA ggplot2 graph is made up of three components.\nData: Data of your choice that you want to visually summarise.\nGeometry or geoms: Geometry dictates the type of graph that you want to plot and this information is conveyed to ggplot2 through the geom() command line. For eg: using geom_boxplot() you can plot a box-plot with your data. Likewise, there are many types of geometry that you can plot using ggplot2 package.\nAesthetic mappings: Aesthetics define the different kinds of information that you want to include in the plot. The most important aesthetic is choosing which data values to plot on the x-axis and to the y-axis. Another example is the colour of the data points, which can be used to differentiate two different categories in the data. The use of aesthetics depends on the geometry that you are using. We use the command aes() for adding different types of aesthetics to the plot.\nSo let us plot a graph from scratch and learn how to use different aesthetics available.\n1. Setting up the prerequisites\nFirst, we need to install the ggplot2 package in R as it does not come in the standard distribution of R. For the dataset, we will first download the Stat2Data package which houses a lot of cool datasets. For this tutorial let us use the Hawks dataset which showcases body measurements from three different species of Hawks. This data was collected by students and faculty at Cornell College in Mount Vernon and the dataset was made available by late Prof. Bob Black at Cornell College.\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 and Stats2Data packages we use the following lines of command. Call the Hawks data using the data() command.\n\ninstall.packages(\"ggplot2\")\ninstall.packages(\"Stat2Data\")\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nLet us look at how the dataset is structured. Use str() command\n\nlibrary(Stat2Data)\ndata(\"Hawks\")\nstr(Hawks)\n\n\n\n\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"classe\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"first_values\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Month\",\"2\":\"integer\",\"3\":\"9, 9, 9, 9, 9, 9\"},{\"1\":\"Day\",\"2\":\"integer\",\"3\":\"19, 22, 23, 23, 27, 28\"},{\"1\":\"Year\",\"2\":\"integer\",\"3\":\"1992, 1992, 1992, 1992, 1992, 1992\"},{\"1\":\"CaptureTime\",\"2\":\"integer\",\"3\":\"13:30, 10:30, 12:45, 10:50, 11:15, 11:25\"},{\"1\":\"ReleaseTime\",\"2\":\"integer\",\"3\":\",  ,  ,  ,  ,\"},{\"1\":\"BandNumber\",\"2\":\"integer\",\"3\":\"877-76317, 877-76318, 877-76319, 745-49508, 1253-98801, 1207-55910\"},{\"1\":\"Species\",\"2\":\"integer\",\"3\":\"RT, RT, RT, CH, SS, RT\"},{\"1\":\"Age\",\"2\":\"integer\",\"3\":\"I, I, I, I, I, I\"},{\"1\":\"Sex\",\"2\":\"integer\",\"3\":\", , , F, F,\"},{\"1\":\"Wing\",\"2\":\"double\",\"3\":\"385, 376, 381, 265, 205, 412\"},{\"1\":\"Weight\",\"2\":\"integer\",\"3\":\"920, 930, 990, 470, 170, 1090\"},{\"1\":\"Culmen\",\"2\":\"double\",\"3\":\"25.7, NA, 26.7, 18.7, 12.5, 28.5\"},{\"1\":\"Hallux\",\"2\":\"double\",\"3\":\"30.1, NA, 31.3, 23.5, 14.3, 32.2\"},{\"1\":\"Tail\",\"2\":\"integer\",\"3\":\"219, 221, 235, 220, 157, 230\"},{\"1\":\"StandardTail\",\"2\":\"integer\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"Tarsus\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"WingPitFat\",\"2\":\"integer\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"KeelFat\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"},{\"1\":\"Crop\",\"2\":\"double\",\"3\":\"NA, NA, NA, NA, NA, NA\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nSo there is a lot of information in the dataset which we can use for plotting. So let us try plotting them.\n2. Building a plot\nOne thing to remember here is that how ggplot2 builds a graph is by adding layers. Let us start by plotting the basic layer first where the x-axis shows ‘weight of the hawks’ and the y-axis shows ‘wingspan of the hawks’.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing))\n\n\nWait a sec! Where are my data points? So right now if we look at the syntax of the ggplot code we can see that we have not told ggplot2 which geometry we want. Do we want a scatter plot or a histogram or any other type of graph? So let us plot a scatter plot first. Use geom_point() command. By adding geom_point() to the ggplot() command is equivalent to adding an extra layer to the already existing layer that we got previously. Let us also use theme_minimal() for a nice looking theme.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + geom_point() + \n  theme_minimal()\nWarning: Removed 11 rows containing missing values (geom_point).\n\n\nWe got the graph! but we also got a warning message. The warning message tells us that the dataset which we had used to plot the graph had 11 rows of NA values and which could not be plotted into the graph. In real-life cases, we can have datasets with NA values due to various reasons, so this is fine.\nNow, this graph even though shows us data points we are not sure which point belongs to which species, as this dataset contains data for three species of Hawks. So let us try giving different colours to the points concerning the species to differentiate between the three.\n1. Changing colour\nTo change colour of the points with respect to species, we have to add colour = Species within the aes() of the ggplot command.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal()\n\n\nThe species abbreviations are the following: CH=Cooper’s, RT=Red-tailed, SS=Sharp-Shinned.\nNow, this graph is way better than the previous one.\n2. Changing point shape.\nNow instead of the colour let us change the shape of the point. Use shape() command in aes()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, shape = Species)) + #instead of colour use shape.\n  geom_point() + theme_minimal() \n\n\nNow we did change the shape of points but it is still hard to make out the difference. Let us try specifying colour along with the shape\nAdding both colour and shape in aesthetics\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, \n                         colour = Species, shape = Species)) + geom_point() +\n  theme_minimal()\n\n\nThis plot is much better than the previous one.\nNow let us try specifying colour within the aes() of the geom()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(aes(colour = Species)) + theme_minimal()\n\n\nWe got the same graph as before! So what is the difference in specifying colour within aes() of ggplot() compared to the same but within geom(). Let us look at another example.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point() + theme_minimal()\n\n\nI manually changed the colour of the points to red colour. Now let try specifying colour to the aes() within the geom()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = \"red\")) + \n  geom_point(aes(colour = Species)) + theme_minimal()\n\n\nYou can see that the red colour is overridden by other colours. So the aes() mapping (in this case colour) within geom() will override any aes() mapping within ggplot(). And whatever aes() mapping we give within ggplot() will be inherited by all geom() layers that will be added along with the ggplot() layer.\nLet us see another case.\n\n\nShow code\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(colour = \"darkred\") + theme_minimal()\n\n\n\n\nShow code\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing)) + \n  geom_point(aes(colour = \"darkred\")) + theme_minimal()\n\n\nIf you compare both the codes, the only difference is that the colour = \"darkred\" command was outside aes() in the first code and inside aes() in the second code. So why didn’t the second graph have the same dark-red coloured points as the first one? The reason is that in the first code we are explicitly told to have all data points to be coloured dark-red but that is not the case with the second code. In the second code, since we have specified it inside aes(), ggplot is trying to look for a variable called “darkred” inside the dataset and colour it accordingly. This is why the legend that appears in the second graph has listed “darkred” as a category. And ggplot fails to find the variable called “darkred” but it still recognizes the colour command line and colour all the points in red. So the bottom line is that R has a pre-determined way of reading a code, so we users should well-understand what each line is expected to do and should not expect R to just fill it in accordingly to what we write.\nNow let us try a few other examples;\n3. Changing size\nUse size() in aes()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Species, y = Hallux, size = Culmen)) + \n  geom_point() + theme_minimal()\n\n\n4. Changing colour, shape and size manually\nUse scale_shape_manual() for changing shape, similarly scale_color_manual() for changing colour and scale_size_manual() for changing size of the element.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Hallux, colour = Species,\n                         shape = Species, size = Species)) + \n  geom_point() +\n  scale_shape_manual(values=c(1, 2, 3)) +\n  scale_color_manual(values=c('red','blue', 'green')) +\n  scale_size_manual(values=c(1,5,10)) + theme_minimal()\n\n\n\n\n\n5. Changing the opcaity of the elements\nUse alpha() within the geom() with a numeric value to change the opacity of the elements. This is useful for visualising large datasets such as this.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point(alpha = 1/5) + theme_minimal()\n\n\nThe same commands also work for most of the other types of geom(). Now let us see a few other aesthetics in other types of geoms.\n6. Changing fill colour\nUse fill() in aes()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_minimal()\n\n\nUse scale_fill_manual() to manually change the colours.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, fill = Species)) +\n  geom_histogram(bins = 25) + theme_minimal() + \n  scale_fill_manual(values = c(\"darkred\", \"darkblue\", \"darkgreen\"))\n\n\n7. Changing line type\nUse linetype in aes()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + theme_minimal()\n\n\nYou can manually change line types using scale_linetype_manual()\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, linetype = Species)) + \n  geom_line() + \n  scale_linetype_manual(values= c(\"twodash\", \"longdash\", \"dotdash\")) +\n  theme_minimal()\n\n\n\n\n\nNow let us also see how to change the labels in a graph.\n8. Changing labels in the axes\nUse xlab() to change x-axis title, ylab() to change y-axis title, ggtitle() with label and subtitle to add title and subtitle respectively.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + xlab(\"Weight (gm)\") + ylab(\"Wing (mm)\") +\n  ggtitle(label = \"Weight vs Wing span in three different species of Hawks\", \n          subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\")\n\n\nThe same result can be obtained by using labs() to specify each label in the graph. For renaming the legend title, the command will depend on what is there within the aes() or in other words what is the legend based on.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + labs(x = \"Weight (gm)\", y = \"Wing (mm)\", \n  title= \"Weight vs Wing span in three different species of Hawks\", \n  subtitle = \"CH=Cooper's, RT=Red-tailed, SS=Sharp-Shinned\",\n  caption = \"Source: Hawk dataset from Stat2Data r-package\", #caption for the graph\n  colour = \"Hawk Species\", # rename legend title\n  tag = \"A\") #figure tag\n\n\n9. Tweaking the axes\nUse xlim() and ylim() for limiting x and y axes respectively.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + xlim(c(0,1000)) + ylim(c(200,350))\n\n\nUse coord_cartesian() to zoom in on a particular area in the graph\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + coord_cartesian(xlim = c(0,1000),\n                                                   ylim = c(200,350))\n\n\nUse coord_flip() to flip the x and y axes.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + coord_flip()\n\n\nUse scale_x_continuous() for tweaking the x-axis. The same command work for the y-axis also. You can include label() inside the command to manually label the breaks of the axes.\n\n\nShow code\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + scale_x_continuous(breaks = c(0,1000,2000))\n\n\n\n\nShow code\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + \n  scale_x_continuous(breaks = c(0,1000,2000),label = c(\"low\", \"medium\", \"high\"))\n\n\nUse scale_y_reverse() to display the y values in the descending order. Same command applies to x-axis also.\n\nlibrary(ggplot2)\nlibrary(Stat2Data)\ndata(\"Hawks\")\n\nggplot(data = Hawks, aes(x = Weight, y = Wing, colour = Species)) +\n  geom_point() + theme_minimal() + scale_y_reverse()\n\n\nSummary\nIn this tutorial, we learned how to modify aesthetic present for different geoms in ggplot2. Then we learned how to modify labels in a graph and finally, we learned how to modify and change the axes elements. This tutorial is in no way exhaustive of the different ways you can modify a graph as there many more methods which are not discussed here. Instead of trying to include everything, this tutorial tries to be a stepping stone to help students of R to learn the basics of tweaking a graph. Try to practice what is covered here using other datasets available in the r-package Stat2Data. Have a good day my friend!\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nAnn Cannon, George Cobb, Bradley Hartlaub, Julie Legler, Robin Lock, Thomas Moore, Allan Rossman and Jeffrey Witmer (2019). Stat2Data: Datasets for Stat2. R package version 2.0.0. https://CRAN.R-project.org/package=Stat2Data\n",
      "last_modified": "2021-12-08T08:43:01+05:30"
    },
    {
      "path": "project3.html",
      "title": "Data visualization using ggplot2",
      "description": "Plot you first graph with this tutorial using the ggplot2 R-package.\n",
      "author": [
        {
          "name": "Jewel Johnson",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSetting up the prerequisites\n1. Bar graph\n2. Histogram\n3. Line graph\n4. Scatter plot\n5. Density Plot\n6. Dot-plot\n7. Rug-plot\n8. Box-plot\n9. Violin-plot\nSummary\nReferences\n\nIn this tutorial we will be plotting different types of graphs using the package ggplot2 in R. The ggplot2 is an excellent package which can used to create beautiful data visualizations. It has been created and developed by Dr. Hadley Wickham. At the very heart of a ggplot graph we have a dataset which we want to plot, a coordinate system which acts as the environment for the plot and ‘geoms’- which can be tweaked to get different aesthetics for the graph.\nThis tutorial is primarily focused on students who are beginners in R programming and wants to quickly plot their data without much of a hassle. So without further ado let us get started!\nSetting up the prerequisites\nFirst we need to install the ggplot2 package in R as it does not come in the standard distribution of R.\nTo install packages in R we use the command install.packages() and to load packages we use the command library(). Therefore to install and load ggplot2 package we use the following lines of command.\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nAll right we have the ggplot2 package loaded, now we just need some data to plot. Most R programming tutorials uses the iris dataset for showing examples. This tutorial won’t be like most tutorials. So let me introduce you to the lovely penguins from Palmer Station in Antarctica!\nFor this tutorial we will be installing the palmerpenguins package which showcases body measurements taken from three different species of penguins from Antarctica. This package was made possible by the efforts of Dr. Allison Horst. The penguin data was collected by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER.\nInstall the palmerpenguins package and load it in R.\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\n\nNow there are two datasets in this package. We will be using the penguins dataset which is a simplified version of the raw-data present in the package.\nUse the command head() to display the first few values of penguins dataset to see how it looks like\n\nlibrary(palmerpenguins)\nhead(penguins)\n\n\n\n\n{\"columns\":[{\"label\":[\"species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"island\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"bill_length_mm\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bill_depth_mm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flipper_length_mm\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"body_mass_g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sex\"],\"name\":[7],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.1\",\"4\":\"18.7\",\"5\":\"181\",\"6\":\"3750\",\"7\":\"male\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.5\",\"4\":\"17.4\",\"5\":\"186\",\"6\":\"3800\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"40.3\",\"4\":\"18.0\",\"5\":\"195\",\"6\":\"3250\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"NA\",\"4\":\"NA\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"36.7\",\"4\":\"19.3\",\"5\":\"193\",\"6\":\"3450\",\"7\":\"female\",\"8\":\"2007\"},{\"1\":\"Adelie\",\"2\":\"Torgersen\",\"3\":\"39.3\",\"4\":\"20.6\",\"5\":\"190\",\"6\":\"3650\",\"7\":\"male\",\"8\":\"2007\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nWe can see that are 8 columns in the dataset representing different values. Now let us try plotting some graphs with this data.\n1. Bar graph\nSo we will try to plot a simple bar graph first. Bar graphs are used to represent categorical data where the height of the rectangular bar represents the value for that category. From the bar graph we will be plotting, we will see the frequency data for all three species of penguins.\nWe will be using the geom_bar() command to plot the bar graph. Let us also use the command theme_bw() for the nice aesthetics.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, fill = species)) + \n  xlab(\"Species\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for each species\") + \n  geom_bar() + theme_bw()\n\n\n2. Histogram\nHistograms are similar to bar graphs visually. But histograms are used to represent continuous data. Also the all the rectangular bars will have same bin size or width.\nWe can plot a histogram using the command geom_histogram().\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Frequency\") + \n  ggtitle(\"Frequency of individuals for respective body mass\") + \n  geom_histogram(bins = 25) + theme_bw()\nWarning: Removed 2 rows containing non-finite values (stat_bin).\n\n\nThe warning message indicates that for two rows in the dataset, they have NA values or that they did not have any values present. This true for real life cases, as during data collection sometimes you will be unable to collect data due to various reasons. So this is perfectly fine.\n3. Line graph\nLine graph simply joins together data points to show overall distribution.\nUse the command geom_line() for plotting a line graph.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = bill_length_mm, \n                            y = bill_depth_mm, colour = species)) + \n  xlab(\"Bill length (mm)\") + ylab(\"Bill depth (mm)\") + \n  ggtitle(\"Bill length vs Bill depth\") + geom_line() + theme_bw()\n\n\n4. Scatter plot\nScatter plot simply denotes the data points in the dataset.\nUse the command geom_point() to plot a scatter plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, \n                            shape = species, colour = species)) + \n  xlab(\"Body mass (g)\") + ylab(\"Flipper length (mm)\") + \n  ggtitle(\"Body mass vs Filpper length\") + geom_point(size = 2) + theme_bw()\n\n\n5. Density Plot\nDensity plots is similar to histograms but shows it shows the overall distribution of the data in a finer way. This way we will get a bell shaped curve if our data follows a normal distribution.\nUse the command geom_density() to a density plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = body_mass_g, fill = species)) + \n  xlab(\"Body Mass (g)\") + ylab(\"Density\") + ggtitle(\"Body mass distribution\") + \n  geom_density() + theme_bw()\n\n\nSince we plotted for all three species the graph looks clustered. Let us try plotting the same graph for only gentoo penguins. We will use the dplyr package to filter() data for gentoo penguins alone. The dplyr package comes in-built with R so just load the dplyr package using the command library(). The dplyr package was also developed by Dr. Hadley Wickham.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_density(fill = \"red\") + theme_bw()\n\n\n6. Dot-plot\nDot-plot is similar to a density plot but it shows discretely each data point in the distribution.\nUse the command geom_dotplot() to plot a dot-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 100) + theme_bw()\n\n\n7. Rug-plot\nRug-plot is a simple way to visualize distribution of data along the axis lines. It is often used in conjunction with other graphical representations.\nUse the command geom_rug() to plot a rug-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\npenguins_gentoo <- penguins %>% filter(species == \"Gentoo\")\n\nggplot(data = penguins_gentoo, aes(x = body_mass_g, y = flipper_length_mm)) + \n  xlab(\"Body Mass of Gentoo penguins (g)\") + ylab(\"Density\") + \n  ggtitle(\"Body mass distribution of Gentoo penguins\") + \n  geom_point(colour = \"darkred\") + geom_rug() + theme_bw()\n\n\n8. Box-plot\nBox-plot is one of the better ways of showing data via quartiles. You can learn more about box-plots here.\nUse the command geom_boxplot() to plot a box-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, colour = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + geom_boxplot() + \n  theme_bw()\n\n\n9. Violin-plot\nViolin-plot can be considered as the best of both a box-plot and a density plot. It shows the quartile values, like in a box-plot and also shows the distribution of the data, like in a density plot.\nUse the command geom_violin() in conjunction with geom_boxplot() to plot a violin-plot.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins, aes(x = species, y = body_mass_g, fill = species)) + \n  xlab(\"Species\") + ylab(\"Body mass (g)\") + \n  ggtitle(\"Body mass in three diferent species of penguins\") + \n  geom_violin(aes(colour = species), trim = TRUE) + geom_boxplot(width = 0.2) +\n  theme_bw()\n\n\nSummary\nI hope this tutorial helped you to get familiarise with ggplot2 commands. There are many more different types of graphs that you can plot using ggplot2. The tutorial only showed some of the commonly used ones. The best way to learn R is through actually doing it yourself. Try to recreate the examples given in this tutorial by yourself and then try what you learned with the different datasets available in R. Have a good day!\nReferences\nH. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Read more about ggplot2 here. You can also look at the cheat sheet for all the syntax used in ggplot2. Also check this out.\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.\n",
      "last_modified": "2021-12-08T08:43:07+05:30"
    }
  ],
  "collections": ["posts/posts.json"]
}
